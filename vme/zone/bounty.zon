/*
filename    bounty
password    release
changedby   Sender
EmailAdd	chris.spanton@gmail.com
request     compile
version     1
END HEADER*/

#include <macros.h>

#define JOIN_ONGOING "Becoming a Bounty Hunter"
#define JOIN_COMPLETE "Bounty Hunter"
#define BLACKSMITH_ONGOING "Aiding The Blacksmith"
#define BLACKSMITH_COMPLETE "Blacksmith Aided"
#define JEWELER_ONGOING "Aiding The Jeweler"
#define JEWELER_COMPLETE "Jeweler Aided"
#define SUMMONER_ONGOING "Aiding The Summoner"
#define SUMMONER_COMPLETEISH "Summoner Aided"
#define SUMMONER_COMPLETE "Summoning Complete"
#define NECRO_ONGOING "Aiding The Necromancer"
#define NECRO_COMPLETEISH "Necromancer Aided"
#define NECRO_COMPLETE "Necromancer Complete"

/* ================================================================== */
/*                                ZONE                                */
/* ================================================================== */

%zone bounty

lifespan 10
reset RESET_ANYHOW
title "Bounty Hunters Guild@Mainland"
creators {"sender"}

notes
"This is the guild of the bounty hunters. In version 1.0 we introduce some 
early implementations of gamification features taken from modern gaming. 
There is significant opportunity in the future to expand on this. 

Expanding rewards, new types of bounties, bonuses, loot boxes (game money 
not IRL money), adding a cost to bounties, teaching
skills / spells to aid in bounty hunting, etc are all on the table.

Leaderboards are also a significant part of the process, that is not yet 
implemented as of v1.0. There is some code in the zone to implement that, but
it seemed a messy and cumbersome implementation. I'll look to leverage existing 
competition zone infrastructure for future versions.

///////////////////////////////
get 30 daily bounty streak
talk to bounty hunter, accept question
pray to enter sanctum, feast
talk to the guide. Get ability to feast.
talk to the historian. 
talk to the blacksmith. 
	do quest.
	   500,000 lbs of steel. ** Need to write ability to count, accept, and track.
	   200,000 lbs of coal. ** See the Summoner. Add area to sanctum. Create summoner and task, etc.
	Forge unbreakable armor/weapon?
	Get ability to list arms/armors.
	
talk to the jeweler. 
	do quest?
	   leverage birthstones.
	Get ability to buy list jewely.
talk to the historian. 
	Historian will clarify ask for playing spy on Al Kazeem. (maybe captain)?
Talk to Al Kazeem
	Either choose to betray the bounty hunters, by alerting targets
	
Jewelry, as well as arms/armor use birthstones and... perhaps some other material?
for crafting. Crafting these items allows creation of a wide range of items, with each
birthstone representing a unique ability or other boost.

// spree - how does it fit in the story?
// who gives it? Who rewards it?

Special thanks to Jager, for unwittingly sharing his package delivery scheme.
It's a perfect fit for newbies to enjoy bounties! Thanks brother. :)

Special thanks to Papi for creating the login streak bounties. It was a great idea!

"

help
"The Guild of the Bounty Hunters is an ancient institution that has survived 
and indeed thrived on the outskirts of Midgaard. Wealthy patrons who need 
something handled, a back-door to men of law finding their mark, and any 
number of other needs have been brought before the bounty hunters."

/* ================================================================== */
/*                               DIL                                  */
/* ================================================================== */

/* Bounty System!

There are a few helper functions here to assist with the bounty system.

integer add_bp@bounty(n : integer, u : unitptr);

n - the number of bounty points to add or subtract.
u - the unitptr to the unit which you want to interact.

Function is useful to safely adding or subtracting bounty points.
Will return the number of bounty points AFTER the transaction has processed.
If the value is less than 0, bounty points will be set to 0, 
and that is waht will return.

To use this as a check in the case of a situation where you dont want to allow
it to go below 0, such as in a store to use the bp in a transaction, simply 
pass 0 as the n value, and it will return the current number of bounty points.



*/


%dil

// Called when a player logs in.
//
//
dilbegin login_event();
external
   login_streak();
code
{
   login_streak();

   //
   // Add more stuff here if you like, like competitions
   //

   return;
}
dilend


// 1 means your first login
// 2 means you've logged on for two consecutive days
// 3... etc.
//
dilbegin streak_bonus(nCount : integer);
external
	integer add_bp@bounty(n : integer, u : unitptr);
var
	bp : integer;
code
{
	log("Awarding " + self.symname + " streak bonus for " + itoa(nCount) + " days.");
	
	bp := add_bp(nCount,self);

   // Either cap at e.g. 7 days, or just keep it going up?
   // for now, we'll let it run! :)
   return;
}
dilend


// Call when a PC logs on or off (self == pc)
//
// .[1] == Last day the streak was hit
// .[2] == streak since this day
//
dilbegin login_streak();
external
   streak_bonus(nCount : integer);

var
   exd : extraptr;
   sl  : stringlist;
   nToday : integer;
   nLast  : integer;
   nCount : integer;
code
{
   exd := "$loginstreak" in self.info;
   if (exd == null)
   {
      sl := {"$loginstreak", "0", "0"};
      addextra(self.info, sl, "");
      exd := "$loginstreak" in self.info;
   }

   nToday := realtime / (60*60*24);
   nLast  := atoi(exd.names.[1]);
   nCount := nToday - atoi(exd.names.[2]) + 1;

   // did we do a login streak?
   if (nLast+1 == nToday)
   {
      act("<div class='cpy'>Your login streak is now at "+itoa(nCount)+" days.</div>", A_ALWAYS, self, null, null, TO_CHAR);
      act("<div class='xpgain'>You gain "+itoa(nCount)+" bounty point(s) as a login streak reward.</div>", A_ALWAYS, self, null, null, TO_CHAR);
      exd.names.[1] := itoa(nToday);  // Move to the next day
      streak_bonus(nCount);
   }
   else if (nLast+1 < nToday)    // Did we miss out on the streak?
   {
      act("<div class='cpy'>Your login streak is now at "+itoa(1)+" days.</div>", A_ALWAYS, self, null, null, TO_CHAR);
      act("<div class='xpgain'>You gain "+itoa(1)+" bounty point(s) as a login streak reward.</div>", A_ALWAYS, self, null, null, TO_CHAR);
      exd.names.[1] := itoa(nToday);
      exd.names.[2] := itoa(nToday);  // Set streak since
      streak_bonus(1);
   }
   else
   {
      // log("A day hasn't passed yet....");
      return;
   }

   return;
}
dilend

dilbegin reward();
var
	arg : string;
	targ : string;
	pc : unitptr;
	bonus : string;
	wiz : unitptr;
code
{
:start:
	wait(SFB_CMD, (command("reward")) and (activator.level >= 253));
	
	wiz := activator;
	arg := argument;
	targ := getword(arg);
	bonus := getword(arg);
	
	pc := findsymbolic(wiz, targ+"@_players", FIND_UNIT_WORLD);
	secure(pc,donezo);
	secure(wiz,donezo);
	if (not(pc))
	{
		act("Unable to find target "+targ+".", A_ALWAYS, wiz, null, null, TO_CHAR);
		goto donezo;
	}
	
	if(not("$bounty_points" in pc.extra))
		addextra(pc.extra,{"$bounty_points"},"0");
	
	pc.extra.["$bounty_points"].descr := itoa(atoi(pc.extra.["$bounty_points"].descr)+atoi(bonus));
	
	
	act("<div class='xpgain'>You have awarded "+bonus+" Bounty Points to "+pc.name+" for the reason '"+arg+"'.</div>", A_ALWAYS, wiz, null, null, TO_CHAR);
	act("<div class='xpgain'>You have been awarded "+bonus+" Bounty Points for '"+arg+"'.</div>", A_ALWAYS, pc, null, null, TO_CHAR);
	log("Bonus Award: "+wiz.name+" has awarded "+bonus+" Bounty Points to "+pc.name+" for the reason '"+arg+"'.");
	
:donezo:
	unsecure(wiz);
	unsecure(pc);
	goto start;
}
dilend

dilbegin no_magic();
code
{
:start:
	wait(SFB_CMD,(activator.type==UNIT_ST_PC) and command("cast"));
	act("This room is a dead magic zone!",A_ALWAYS,activator,null,null,TO_CHAR);
	block;
	goto start;
}
dilend

dilbegin no_pick();
code
{
:start:
	wait(SFB_CMD,(activator.type==UNIT_ST_PC) and command("pick"));
	act("The magic of this space prevents that!",A_ALWAYS,activator,null,null,TO_CHAR);
	block;
	goto start;
}
dilend

dilbegin report();
var
	pc : unitptr;
	s : string;
	total : string;
	streak : string;
	max : string;
code
{
	heartbeat := PULSE_SEC;

:start:

	wait(SFB_CMD, command("say") and (argument == "report"));
	
	// for each value of s, dil should generate relevant data based on extras.
	
	pc := activator;
	secure(pc,donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	if (self.nameidx == "hunter")
		goto hunter;
	else if (self.nameidx == "jeweler")
		goto jeweler;
	else if (self.nameidx == "blacksmith")
		goto blacksmith;
	
:hunter:

	s := "contract";
	
	exec("say Here's your "+s+" report, "+pc.name+".",self);
	
	if(not("$monthly_total" in pc.extra))
		addextra(pc.extra,{"$monthly_total"},"0");
	if(not("$monthly_streak" in pc.extra))
		addextra(pc.extra,{"$monthly_streak"},"0");
	if(not("$monthly_max" in pc.extra))
		addextra(pc.extra,{"$monthly_max"},"0");
	
	total := pc.extra.["$monthly_total"].descr;
	streak := pc.extra.["$monthly_streak"].descr;
	max := pc.extra.["$monthly_max"].descr;
	
	exec("say You have completed a total of "+total+" monthly contracts.",self);
	exec("say You are currently on a streak of "+streak+" monthly contracts.",self);
	exec("say Your longest monthly contract streak is "+max+".",self);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	if(not("$daily_total" in pc.extra))
		addextra(pc.extra,{"$daily_total"},"0");
	if(not("$daily_streak" in pc.extra))
		addextra(pc.extra,{"$daily_streak"},"0");
	if(not("$daily_max" in pc.extra))
		addextra(pc.extra,{"$daily_max"},"0");
	
	total := pc.extra.["$daily_total"].descr;
	streak := pc.extra.["$daily_streak"].descr;
	max := pc.extra.["$daily_max"].descr;
	
	exec("say You have completed a total of "+total+" daily contracts.",self);
	exec("say You are currently on a streak of "+streak+" daily contracts.",self);
	exec("say Your longest daily contract streak is "+max+".",self);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	if(not("$bonus_total" in pc.extra))
		addextra(pc.extra,{"$bonus_total"},"0");
	if(not("$bonus_streak" in pc.extra))
		addextra(pc.extra,{"$bonus_streak"},"0");
	if(not("$bonus_max" in pc.extra))
		addextra(pc.extra,{"$bonus_max"},"0");
	
	total := pc.extra.["$bonus_total"].descr;
	streak := pc.extra.["$bonus_streak"].descr;
	max := pc.extra.["$bonus_max"].descr;
	
	exec("say You have completed a total of "+total+" bonus contracts.",self);
	exec("say You are currently on a streak of "+streak+" bonus contracts.",self);
	exec("say Your longest bonus contract streak is "+max+".",self);
	
	goto donezo;

:jeweler:

	s := "package";
	
	exec("say Here's your "+s+" report, "+pc.name+".",self);
	
	if(not("$package_total" in pc.extra))
		addextra(pc.extra,{"$package_total"},"0");
	if(not("$package_streak" in pc.extra))
		addextra(pc.extra,{"$package_streak"},"0");
	if(not("$package_max" in pc.extra))
		addextra(pc.extra,{"$package_max"},"0");
	
	total := pc.extra.["$package_total"].descr;
	streak := pc.extra.["$package_streak"].descr;
	max := pc.extra.["$package_max"].descr;
	
	exec("say You have completed a total of "+total+" package deliveries.",self);
	exec("say You are currently on a streak of "+streak+" package deliveries.",self);
	exec("say Your longest package delivery streak is "+max+".",self);
	
	goto donezo;
		
:blacksmith:

	s := "killing spree";
	
	exec("say Here's your "+s+" report, "+pc.name+".",self);
	
	if(not("$spree_total" in pc.extra))
		addextra(pc.extra,{"$spree_total"},"0");
	if(not("$spree_streak" in pc.extra))
		addextra(pc.extra,{"$spree_streak"},"0");
	if(not("$spree_max" in pc.extra))
		addextra(pc.extra,{"$spree_max"},"0");
	
	total := pc.extra.["$spree_total"].descr;
	streak := pc.extra.["$spree_streak"].descr;
	max := pc.extra.["$spree_max"].descr;
	
	exec("say You have completed a total of "+total+" killing sprees.",self);
	exec("say You are currently on a streak of "+streak+" killing sprees.",self);
	exec("say Your longest killing spree streak is "+max+".",self);
	
	goto donezo;
	
:donezo:

	unsecure(pc);
	goto start;
}
dilend

dilbegin delivery();
external
	integer add_bp@bounty(n : integer, u : unitptr);
var
	pc : unitptr;
	recip : unitptr;
	package : unitptr;
	iFight : integer;
	quest : extraptr;
	minlev : integer;
	maxlev : integer;
	qnames : stringlist;
	rtitle : string;
	rdesc : string;
	rlev : integer;
	temp : integer;
	i : integer;
code
{
	heartbeat:=PULSE_SEC * 5;
	on_activation(self.position == POSITION_FIGHTING, ina_fight);
	package:=null;

:init:
	iFight := interrupt(SFB_COM, self.position==POSITION_FIGHTING, ina_fight);

:start:
	nopriority;
	wait(SFB_DONE, (activator.type==UNIT_ST_PC) and (activator.outside==self.outside) and (command("say")) and (argument=="i need work"));
	priority;
	pc:=activator;
	secure(pc, lostpc);
	
	if(not("$package_streak" in pc.extra))
		addextra(pc.extra,{"$package_streak"},"0");
	if(not("$package_total" in pc.extra))
		addextra(pc.extra,{"$package_total"},"0");
	if(not("$package_max" in pc.extra))
		addextra(pc.extra,{"$package_max"},"0");

	if((atoi(pc.extra.["$package_max"].descr) >= 100) and (not("$packages" in pc.quests.[JEWELER_ONGOING].names)))
	{
		addstring(pc.quests.[JEWELER_ONGOING].names, "packages");
		if(("pearl" in pc.quests.[JEWELER_ONGOING].names) and ("ruby" in pc.quests.[JEWELER_ONGOING].names) and 
		("moonstone" in pc.quests.[JEWELER_ONGOING].names) and ("jade" in pc.quests.[JEWELER_ONGOING].names) and 
		("diamond" in pc.quests.[JEWELER_ONGOING].names) and ("bloodstone" in pc.quests.[JEWELER_ONGOING].names) and 
		("emerald" in pc.quests.[JEWELER_ONGOING].names) and ("onyx" in pc.quests.[JEWELER_ONGOING].names) and 
		("sapphire" in pc.quests.[JEWELER_ONGOING].names) and ("jasper" in pc.quests.[JEWELER_ONGOING].names) and 
		("agate" in pc.quests.[JEWELER_ONGOING].names) and ("opal" in pc.quests.[JEWELER_ONGOING].names) and 
		("packages" in pc.quests.[JEWELER_ONGOING].names))
		{
			exec("say Incredible! This is no small quantity of stones, and that streak is impressive indeed.",self);
			exec("say These packages will go out immediately "+pc.name+"!",self);
			exec("say You may go and let The Historian know that your tasks for me are complete.",self);
			subextra(pc.quests, JEWELER_ONGOING);
			addextra(pc.quests, {JEWELER_COMPLETE},"");
		}
	}
	
	quest:="packagefor" in pc.quests;
	if(quest!=null)
	{
		exec("say You have not yet delivered the package I gave you!", self);
		exec("say I will clear you of the responsibility (and the quest flag),", self);
		exec("say but you will be penalized and lose 300 xp and 2 bounty points.", self);
		exec("say Nod if this is acceptable.", self);
		wait(SFB_DONE, (pc.outside!=self.outside) or ((activator==pc) and (command("nod"))));
		if(pc.outside!=self.outside) goto lostpc;
		temp:=dildestroy("packagefor@bounty", pc);
		subextra(pc.quests, "packagefor");
		pc.extra.["$package_streak"].descr := "0";
		experience(-500, pc);
		i := add_bp(-2,pc);
		act("<div class='xpgain'>You lose 500 xp and 2 bounty points.</div>", A_SOMEONE, pc, null, null, TO_CHAR);
		unsecure(pc);
		goto start;
	}

	minlev:=pc.level+(pc.level/10);
	if(pc.level==50) maxlev:=199;
	else maxlev:=pc.level+(pc.level/5);

:loop:
	recip:=findrndunit(pc, FIND_UNIT_WORLD, UNIT_ST_NPC);
	secure(recip, loop);
	rdesc:=recip.outside_descr;
	rtitle:=recip.title;
	rlev:=recip.level;
	unsecure(recip);
	if(((rlev<minlev) or (rlev>maxlev)) and (pc.level<GOD_LEVEL)) goto loop;

	exec("say Oh you do eh? Fine, "+pc.name+"!", self);
	exec("say I need you to deliver a package for me.", self);
	exec("say Just nod if you will.", self);

	wait(SFB_DONE, (pc.outside!=self.outside) or ((activator==pc) and (command("nod"))));
	if(pc.outside!=self.outside) goto lostpc;

	package:=load("package@bounty");
	package.title:="a package for "+rtitle;
	package.outside_descr:="A package for "+rtitle+" lies here.";
	package.extra.[0].descr := package.extra.[0].descr + 
		"A label reads:<br>The recipient looks like this: "+rdesc;
	addextra(package.extra,{"$recipient"},recip.symname);
	addstring(package.names, rtitle);
	qnames:=null;
	addstring(qnames, "Package for "+rtitle);
	addstring(qnames, "packagefor");
	addstring(qnames, rtitle);
	addextra(pc.quests, qnames, "");
	if(not dilfind("packagefor@bounty", pc)) dilcopy("packagefor@bounty("+itoa(rlev)+")", pc);
	exec("say OK the package is for "+rtitle+".", self);
	exec("give packagefor "+pc.name, self);
	exec("drop packagefor", self);
	exec("say Don't you dare open that, it's not for you!", self);pause;
	exec("say The recipient you are looking for looks like this:", self);
	exec("say "+rdesc, self);
	exec("say And don't worry about giving it to the wrong recipient,", self);
	exec("say if you get it wrong it will be returned to you.", self);pause;
	exec("say If you deliver the package successfully you will get "+itoa(50*rlev)+" xp and 1 bounty point.", self);
	exec("say Now hurry!  That's an important package!", self);
	unsecure(pc);
	goto start;

:ina_fight:
	clear(iFight);
	while(self.position==POSITION_FIGHTING) pause;
	goto init;

:lostpc:
	exec("say Fine! Be that way! Next please?", self);
	unsecure(pc);
	goto start;
}
dilend

dilbegin package();
var
	pc : unitptr;
code
{
	heartbeat:=PULSE_SEC * 4;
:start:
	wait (SFB_DONE, (command("open")) and (self==target));
	block;
	pc := activator;
    secure(pc,lostpc);
	act("$1N opens $2n and it explodes in $1s face, injuring $1m greatly!",
    A_SOMEONE, pc, self, null, TO_REST);
	act("You open $2n and it explodes in your face, injuring you greatly!",
    A_SOMEONE, pc, self, null, TO_CHAR);
	if(pc.hp>0) pc.hp := 0;
	position_update(pc);
	unsecure(pc);
:lostpc:
	destroy(self);
}
dilend

dilbegin aware packagefor(rlev : integer);
external
	integer add_bp@bounty(n : integer, u : unitptr);
var
	q1 : extraptr;
	q2 : extraptr;
	temp : integer;
code
{
	heartbeat:=PULSE_SEC * 4;
:start:
	wait(SFB_DONE, (command("give") and (activator==self) and ("packagefor" in medium.names) and (target.type==UNIT_ST_NPC)));
	q1:="packagefor" in self.quests;
	q2:=target.title in self.quests;
	if((q1==q2) and (q1!=null) and (target.title in medium.names))
	{
		subextra(self.quests, "packagefor");
		experience((50*rlev), self);
		temp := add_bp(1, self); 
		exec("say Thanks, I've been waiting for this, "+self.name+"!", target);
		self.extra.["$package_streak"].descr := itoa(atoi(self.extra.["$package_streak"].descr)+1);
		self.extra.["$package_total"].descr := itoa(atoi(self.extra.["$package_total"].descr)+1);
		if(atoi(self.extra.["$package_streak"].descr) > atoi(self.extra.["$package_max"].descr))
			self.extra.["$package_max"].descr := self.extra.["$package_streak"].descr;
			
		act("<div class='xpgain'>You gain "+itoa(50*rlev)+" xp and 1 bounty point.</div>", A_SOMEONE, self, null, null, TO_CHAR);
		temp := transfermoney(null,self,((50*rlev)/2));	
		destroy(medium);
		temp := dildestroy("packagefor@bounty", self);
		goto start;
	}
	else
	{
		exec("say Thanks, but I don't need this.  You keep it.", target);
		exec("give packagefor "+self.name, target);
		exec("drop packagefor", target);
		goto start;
	}
}
dilend

dilbegin anvils();
var
	i : integer;
	j : integer;
	sl : stringlist;
	pc : unitptr;
code
{
	
	sl := {"The sound of hammers on anvils rings through the smithy.",
			"A large burp of flames suddenly erupts from the furnace.",
			"You suddenly notice an apprentice peering your way.",
			"The Blacksmith takes a long look in your direction, before returning to his work.",
			"A young groll lumbers to the bellows, and begins pumping them.",
			"From somewhere outside, the sound of laughter finds its way through the din.",
			"The Blacksmith turns and begins the task of puring the smelter's contents into forms.",
			"Two apparentices appear and wheel a barrow to a large pile of ore and start shoveling.",
			"The heat from the furnace washes over you.",
			"The din of activity has escalated to a dull roar."};

:start:

	wait(SFB_CMD, TRUE);
	
	pc := activator;
	secure(pc, start);

	i := rnd(0,length(sl)-1);
	j := rnd(3,5);
	
	heartbeat := PULSE_ZONE * j;
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act (sl.[i], A_SOMEONE, pc, null, null, TO_ALL);
	
	unsecure(pc);
	goto start;
	
}
dilend

dilbegin tome();
var
	err : integer;
	buf : string;
	nlist : stringlist;
	i	: integer;
	pc : unitptr;
	targ : string;
code
{
:start:
	buf := "";
	targ := self.outside.zoneidx+"_names.data";
	err := loadstr (targ,buf);
	if (err < 1)
		err := savestr(targ,buf,"w");
	nlist := split(buf,"\n");
	i := 0;
	buf := "";
	while (i < length(nlist))
	{
		
		buf := buf + nlist.[i] + "<br>";
		i := i+1;
	}
	self.extra.[0].descr := "The tome lists the names Bounty Hunters who accomplished incredible works on behalf of The Guild.<br><br>" + buf;
	
:start_sign:	
	wait(SFB_CMD, (command("sign")) and (argument == "tome"));
	pc := activator;
	block;
	
	if (not(JOIN_COMPLETE in pc.quests))
	{
		act ("<div class='clan'>You are not worthy of signing the tome!'</div> ",
		A_ALWAYS,pc,null,self,TO_CHAR);
		goto start_sign;
	}
	i := 0;
	while (i < length(nlist))
	{
		if(pc.name in nlist.[i])
		{
			act ("<div class='clan'>You have already signed the tome!'</div>",
			A_ALWAYS,pc,null,self,TO_CHAR);
			goto start_sign;
		}
		i := i + 1;
	}
		act ("<div class='clan'>The tome flashes <div class='cpb'>brightly</div>!</div>",
			A_ALWAYS,activator,null,self,TO_ALL);
		act ("<div class='clan'>You magically sign the tome, adding your name to history.</div>",
			A_ALWAYS,activator,null,self,TO_CHAR);
		act ("<div class='clan'>$1n magically signs the tome, adding their name to history.</div>",
			A_SOMEONE,activator,null,self,TO_REST);
	
	err := savestr(targ,pc.name+" "+pc.title+"\n","a");
	goto start;
}
dilend //namepillar

dilbegin tablet();
external
	string stringdate@bounty(n : integer);
var
	pc : unitptr;
	slt : stringlist;
	bty : extraptr;
	targ : unitptr;
	sdate : string;
	buf : string;
	which : string;
	slbty : stringlist;
	i : integer;
	cstat : string;
	sltime : stringlist;
	col : string;
	col2 : string;
code
{
	slbty := {"$daily_target","$monthly_target","$bonus_target"};
:start:
	
	wait(SFB_DONE,command("look") and ((argument == "bounty hunters tablet") or (argument == "tablet")) and (activator == self.outside));
	
	pc := activator;
	secure(pc,lostpc);
	
	sdate := stringdate(3);
	sltime := split(asctime(realtime)," ");
	sltime := split(sltime.[3],":");
	sdate := sdate + " " + sltime.[0] + ":" + sltime.[1];
	block;
	buf := "<div class='cr'>REWARD!!</div><br><br>";
	buf := buf + "<div class='cpw'>The current time is: <div class='cpr'>"+sdate+"</div></div><br><br>";
	i := 0;
	
	while (i < length(slbty))
	{
		bty := slbty.[i] in pc.extra;
		if (bty)
		{
			slt := split(bty.descr,"|");
			if("DONE" in slt) 
			{
				col := "cpn";
				col2 := "cpn";
				cstat := "<div class='cpr'>Closed</div>";
			}
			else
			{
				col := "cpr";
				col2 := "cpw";
				cstat := "<div class='cpg'>Open</div>";
			}
			which := replace("$","",slbty.[i]);
			which := replace("_target","",which);
			targ := findsymbolic(slt.[1]);
			sdate := slt.[0];
			if(targ != null)
			{
				buf := buf + 
				"<div class='"+col+"'>-------------------------------------------------------</div>" +
				"<br><div class='"+col2+"'>Contract Date: </div><div class='"+col+"'>" + sdate +
				"<br><div class='"+col2+"'>Contract Term: </div><div class='"+col+"'>" + which +
				"<br><div class='"+col2+"'>Target Name: </div><div class='"+col+"'>" + targ.name + 
				"<br><div class='"+col2+"'>Target Alias: </div><div class='"+col+"'>" + targ.title + 
				"<br><div class='"+col2+"'>Target Description: </div><div class='"+col+"'> " + targ.outside_descr +
				"<br><div class='"+col2+"'>Contract Status: </div><div class='"+col+"'> " + cstat +
				"<br>-------------------------------------------------------</div><br><br>";
			}
			else
			{
				buf := buf + 
				"<div class='cr'>-------------------------------------------------------</div>" +
				"<br><div class='cpw'>Contract Date: </div><div class='cr'>" + sdate +
				"<br><div class='cpw'>Contract Term: </div><div class='cr'>" + which +
				"<br><div class='cpw'>Target Name: </div><div class='cr'>" + "error in target acquisition" + 
				"<br><div class='cpw'>Target Alias: </div><div class='cr'>" + "error in target acquisition" + 
				"<br><div class='cpw'>Target Description: </div><div class='cr'> " + "error in target acquisition" +
				"<br><div class='cpw'>Contract Status: </div><div class='cr'> " + cstat +
				"<br>-------------------------------------------------------</div><br><br>";
			}
		}
		i := i + 1;
	}
	
	act (buf, A_ALWAYS, pc, null, null, TO_CHAR);
	
:lostpc:

	unsecure(pc);
	goto start;
	
}
dilend

dilbegin reprint(pc:unitptr, buf:string, which:string);
var
	slt : stringlist;
	bty : unitptr;
	targ : unitptr;
	sdate : string;
code
{
	log("Reprint called for "+which+" contract: "+buf);
	slt := split(buf,"|");
	targ := findsymbolic(slt.[1]);
	sdate := slt.[0];
	bty := load("contract@bounty");
	buf := bty.extra.[0].descr + 
	"<br><div class='cpw'>Contract Date: </div><div class='cr'>" + sdate +
	"<br><div class='cpw'>Contract Term: </div><div class='cr'>" + which +
	"<br><div class='cpw'>Target Name: </div><div class='cr'>" + targ.name + 
	"<br><div class='cpw'>Target Alias: </div><div class='cr'>" + targ.title + 
	"<br><div class='cpw'>Target Description: </div><div class='cr'> " + targ.outside_descr +"</div>";
	
	bty.extra.[0].descr := buf;
	act (buf, A_ALWAYS, pc, null, null, TO_ALL);	
	link(bty,pc);
	return;
}
dilend

dilbegin status();
external
	reprint@bounty(pc:unitptr, buf:string, which:string);
var
	pc 		: unitptr;
	daily	: extraptr;
	monthly : extraptr;
	bonus 	: extraptr;
	i		: integer;
	j 		: integer;
	k 		: integer;
	arg		: string;
	bty 	: unitptr;
	targ 	: unitptr;
	slt		: stringlist;
	sm,sd,sb : string;
code
{
	heartbeat:= PULSE_SEC;

:start:

	wait(SFB_CMD,command("say") and ("contract status" == argument));

	pc := activator;
	secure(pc,donezo);
	
	daily := "$daily_target" in pc.extra;
	monthly := "$monthly_target" in pc.extra;
	bonus := "$bonus_target" in pc.extra;
	
	i := 0;
	j := 0;
	k := 0;
	
	if(daily != null)
	{
		sd := daily.descr;
		i := i + 1;
		if("DONE" in sd)
			j := j + 1;
		else
			k := k + 1;
	}
	if(monthly != null)
	{
		sm := monthly.descr;
		i := i + 1;
		if("DONE" in sm)
			j := j + 1;
		else
			k := k + 1;
	}
	if(bonus != null)
	{
		sb := bonus.descr;
		i := i + 1;
		if("DONE" in sb)
			j := j + 1;
		else
			k := k + 1;
	}
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say You currently have "+itoa(i)+" contracts.",self);
	if(k > 0)
		exec("say Of those, you have "+itoa(k)+" open, and "+itoa(j)+" closed.",self);
	else 
	{
		exec("say You have closed all of your contracts.",self);
		goto start;
	}
	
:try_again:
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Would you like details on your open contracts?",self);
	exec("say Nod for yes, or shake for no.",self);

	wait(SFB_CMD,(pc == activator));
	if (command("nod"))
		goto sure_thing; 
	else if (command("shake"))
		goto donezo;
	else
		goto try_again;
	
:sure_thing:

	if(k > 0)
	{
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say Here's what you have open, "+pc.name+".",self);
		if((sb != null) and (not("DONE" in sb)))
			reprint(pc,sb,"bonus");
		if((sd != null) and (not("DONE" in sd)))
			reprint(pc,sd,"daily");
		if((sm != null) and (not("DONE" in sm)))
			reprint(pc,sm,"monthly");
		
		if(k == 1)
		{
			act ("$2n quietly slips you a contract.", A_SOMEONE, pc, self, null, TO_CHAR);
			act ("$2n quietly slips $1n something.", A_SOMEONE, pc, self, null, TO_REST);
		}
		else
		{
			act ("$2n quietly slips you your contracts.", A_SOMEONE, pc, self, null, TO_CHAR);
			act ("$2n quietly slips $1n something.", A_SOMEONE, pc, self, null, TO_REST);
		}
	}

:donezo:
	unsecure(pc);
	goto start;
}
dilend

dilbegin join();
var
  pc: unitptr;
  exdp: extraptr;

code
{
	heartbeat:= PULSE_SEC*4;

:start:
	wait(SFB_CMD,(activator.type == UNIT_ST_PC) and (not(JOIN_ONGOING in activator.quests)) and (not(JOIN_COMPLETE in activator.quests)) and (activator.position == POSITION_STANDING));

	
	pc := activator;
	secure(pc, donezo);
	exdp := "$daily_max" in pc.extra;
	if((atoi(exdp.descr) < 40) or (exdp == null))
		goto start;
	
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("hmm",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say Perhaps, you could be worthy.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It is no small feat to close 30 consecutive daily contracts.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It shows a certain commitment to our way.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say For a hundred generations we've filled this role.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There have been times of harship, but the guild has maintained an unbroken line.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote looks at you long and hard.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I wonder.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Do you think yourself up to the task of joining our ranks?", self);

:accept_rogue:

	wait(SFB_CMD, activator == pc);
	if (command("nod"))
		goto accepted; 
	else if (command("shake"))
		goto no_quest;
	else
	{
		exec("say Nod your head if you think yourself up to the challenge.", self);
		goto accept_rogue;
	}

:no_quest:

	exec("say So be it!", self);
	unsecure(pc);
	goto start;

:accepted:

	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The journey will be long and challenging.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say You will have to prove yourself time and again to the guild.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I can't tell you much more, only that this way of life will change you.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Go now, and pray at the Hunters Shrine.", self);
	addextra(pc.quests, {JOIN_ONGOING}, "");

:donezo:

	unsecure(pc);
	goto start;	
}
dilend // END join

dilbegin qhistorian();
var
	pc : unitptr;
code
{
	
	heartbeat := PULSE_SEC*4;
:start:

	wait(SFB_CMD, ("$feasted" in activator.extra) and (JOIN_ONGOING in activator.quests) and (not("$historian" in activator.extra)));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Welcome, "+pc.name+".",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say So, The Guide has sent you to me.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It must be that she fears it is time.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The histories tell of a great enemy. One that will nearly destroy this world.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It was only through a concerted effort of many great heroes that the enemy was pushed back.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say These heroes came from across the great guilds of Valhalla.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote looks at you long and hard.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The Hunter would not have given you access to the Inner Sanctum had he not seen something great in you...", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Do you think yourself a hero, "+pc.name+"?", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I must have time to prepare.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Go and speak with The Blacksmith and The Jeweler.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say They will direct you to address some needs. This will help as we prepare for our enemy.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Return to me once you have completed their tasks. We will endeavor to begin our fight.", self);
	addextra(pc.extra, {"$historian"}, "");
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qhistorian2();
var
	pc : unitptr;
code
{
	
	heartbeat := PULSE_SEC*4;
:start:

	wait(SFB_CMD, ("$feasted" in activator.extra) and (JOIN_ONGOING in activator.quests) and 
	(BLACKSMITH_COMPLETE in activator.quests) and (JEWELER_COMPLETE in activator.quests));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say "+pc.name+", what you have accomplished is a feat in and of itself.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say Yet, our work has only just begun.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say You have proven yourself worthy to join our ranks, and call yourself a Bounty Hunter.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say If we are successful in the task that is to follow, the histories will speak of you.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I hope we all live to see your name in the tome here.", self);
	
	// do some more things! :)
	
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qblacksmith();
var
	pc : unitptr;
code
{
	heartbeat := PULSE_SEC*4;
:start:

	// 500,000 lbs of any kind of metal weapon or armor.
	// 500 lbs each of activated element (4 total) from The Summoner
	// 10 killing spree streak

	wait(SFB_CMD, ("$historian" in activator.extra) and (JOIN_ONGOING in activator.quests) and (not(BLACKSMITH_ONGOING in activator.quests)) and (not(BLACKSMITH_COMPLETE in activator.quests)));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say So then "+pc.name+", it is you after all who they've selected.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say You have a long way to go yet to prove yourself.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say And then, there's that matter of the enemy.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The Historian is doing his work, and must have time.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It is time then for me to set my role into action.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'll need some raw supplies, in order to forge the arms and armor.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say This task will not be easy.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote takes a deep breath.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It is only through supplying the armies of Valhalla, and winnowing down the hordes that we can do what is necessary.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say First, I will need 100,000 lbs of hardened metal armors to fill the smelters.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'm not picky about where it comes from - I'll leave it to you to figure that part out.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Next I'll need fuel for my fires, though not just anything will suffice here.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Bring me a further 500 lbs each of activated elemental powder.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I suspect you'll need to seek The Summoner out in order to gain access to this.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Finally, we'll need to move quickly to keep the enemies at bay while The Historian does his work.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Successfully executing 10 killing sprees in a row should do the trick.", self);	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Go now, there is much to be done.", self);
	addextra(pc.quests, {BLACKSMITH_ONGOING}, "0");
	
:donezo:

	unsecure(pc);
	goto start;
}
dilend

dilbegin qblacksmith2();
var
	pc : unitptr;
	item : unitptr;
	exdp : extraptr;
code
{
	// 100,000 lbs of any kind of steel weapon or armor.
	// 500 lbs each of activated element (4 total) from The Summoner
	// 10 killing spree streak
	
	heartbeat := PULSE_SEC;
:start:

	wait(SFB_DONE, command("give") and (BLACKSMITH_ONGOING in activator.quests) and (target == self));
	
	pc := activator;
	secure(pc, donezo);
	item := medium;
	secure(item,donezo);

	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exdp := BLACKSMITH_ONGOING in pc.quests;
	
	if((item.type == 8) and ((item.value[0] == 4) or (item.value[0] == 3)) and (atoi(exdp.descr) < 100000))
	{
		pc.quests.[BLACKSMITH_ONGOING].descr := itoa(atoi(pc.quests.[BLACKSMITH_ONGOING].descr) + item.weight);
		exec("say This will count for "+itoa(item.weight)+" lbs of good hardened metal "+pc.name+"!", self);
		exec("say That brings your total to "+pc.quests.[BLACKSMITH_ONGOING].descr+" lbs collected.", self);
		exec("emote tosses the "+item.title+" into one of the giant smelters.", self);
		if(atoi(pc.quests.[BLACKSMITH_ONGOING].descr) >= 100000)
		{
			wait(SFB_TICK,command(CMD_AUTO_TICK));
			exec("say By the gods, you've done it "+pc.name+"! You collected "+pc.quests.[BLACKSMITH_ONGOING].descr+" lbs of good steel for the smelters.", self);
			addstring(pc.quests.[BLACKSMITH_ONGOING].names, "steel");
		}
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "fire1@bounty") and (not("fire1" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental fire, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "fire1");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "fire2@bounty") and (not("fire2" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental fire, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "fire2");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "fire3@bounty") and (not("fire3" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental fire, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "fire3");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "fire4@bounty") and (not("fire4" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental fire, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "fire4");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "earth1@bounty") and (not("earth1" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental earth, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "earth1");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		destroy(item);
	}
	else if((item.symname == "earth2@bounty") and (not("earth2" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental earth, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "earth2");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "earth3@bounty") and (not("earth3" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental earth, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "earth3");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "earth4@bounty") and (not("earth4" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental earth, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "earth4");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "air1@bounty") and (not("air1" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental air, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "air1");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "air2@bounty") and (not("air2" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental air, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "air2");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "air3@bounty") and (not("air3" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental air, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "air3");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "air4@bounty") and (not("air4" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental air, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "air4");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "water1@bounty") and (not("water1" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental water, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "water1");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "water2@bounty") and (not("water2" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental water, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "water2");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "water3@bounty") and (not("water3" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental water, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "water3");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "water4@bounty") and (not("water4" in exdp.names)))
	{
		exec("say 125 lbs of activated elemental water, this contains eons of power!", self);
		addstring(pc.quests.[BLACKSMITH_ONGOING].names, "water4");
		exec("emote dumps the "+item.title+" into one of the giant furnaces.", self);
		unsecure(item);
		destroy(item);
	}
	else
	{
		exec("say Thanks for the "+item.title+" "+pc.name+", but I can't use this.", self);
		unsecure(item);
		exec("give "+item.name+" "+pc.name, self);
		exec("drop "+item.name, self);
	}
:checkit:

	if(("air1" in exdp.names) and ("air2" in exdp.names) and ("air3" in exdp.names) and ("air4" in exdp.names) and
		("water1" in exdp.names) and ("water2" in exdp.names) and ("water3" in exdp.names) and ("water4" in exdp.names) and
		("earth1" in exdp.names) and ("earth2" in exdp.names) and ("earth3" in exdp.names) and ("earth4" in exdp.names) and
		("fire1" in exdp.names) and ("fire2" in exdp.names) and ("fire3" in exdp.names) and ("fire4" in exdp.names) and
		("steel" in exdp.names) and ("spree" in exdp.names))
	{
		exec("say What you have done here is unprecedented, "+pc.name+"!" ,self);
		exec("say You may go and let The Historian know that your tasks for me are complete.", self);
		
		subextra(pc.quests, BLACKSMITH_ONGOING);
		addextra(pc.quests, {BLACKSMITH_COMPLETE},"");
	}
:donezo:

	unsecure(pc);
	unsecure(item);
	goto start;
}
dilend


dilbegin qsummoner();
var
	pc : unitptr;
code
{
	heartbeat := PULSE_SEC*4;
:start:
	// q_air@faeries2 - 5
	// q_fire@faeries2 - 5
	// q_water@faeries2 - 5
	// q_earth@faeries2 - 5
	// ball_lightning@akaren - 10
	// activator@bounty - 16
	
	
	wait(SFB_CMD, (JOIN_ONGOING in activator.quests) and (BLACKSMITH_ONGOING in activator.quests) and (not(SUMMONER_ONGOING in activator.quests)) and (not(SUMMONER_COMPLETE in activator.quests)) and (not(SUMMONER_COMPLETEISH in activator.quests)));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I sensed your arrival within the Inner Sanctum "+pc.name+".",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say The others suggest you will be the one.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I am unconvinced.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say However, our hand is forced. The enemy is on the move.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say My role in our defense will be critical!", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I haven't the time to perform errands on behalf of The Blacksmith.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote pauses, and looks at you.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I suppose if you can help with my needs, then I can return a favor and perform the incantations you need.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'll warn you, this task will be difficult.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say We'll be channeling the chaos in our world. This will require unique items, in large quantities.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say First, in order to do The Blacksmith's work I'll require raw elements.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There are elemental jewels to be found throughout the world.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say They represent the purest concentrations available.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Five of each, reflecting Fire, Water, Earth, and Air will be necessary.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Next, I will require pure energy to feed the spells.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Lightning in its purest form, I'd think ten will suffice.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Finally, there is an object that will activate the elemental powders.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The Blacksmith will need them in their active form for his forges.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It is beyond my powers to assist you here, though I can perform the incantations to activate the elements.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I suspect you will need to seek The Necromancer to assist you with this.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Bring these items to me, and I can both help The Blacksmith, and address my own preparations.", self);
	addextra(pc.quests, {SUMMONER_ONGOING}, "0");
	
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qsummoner2();
var
	pc : unitptr;
	item : unitptr;
	qty : integer;
code
{
	// q_air@faeries2 - 5
	// q_fire@faeries2 - 5
	// q_water@faeries2 - 5
	// q_earth@faeries2 - 5
	// ball_lightning@akaren - 10
	// activator@bounty - 16
	
	heartbeat := PULSE_SEC*1;
:start:

	wait(SFB_DONE, command("give") and (SUMMONER_ONGOING in activator.quests) and (target == self));
	
	pc := activator;
	secure(pc, donezo);
	item := medium;
	secure(item,donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));

	if((item.symname == "activator@bounty"))
	{
		if(not("$sum_act" in pc.quests))	
			addextra(pc.quests,{"$sum_act"},"1");
		qty := atoi(pc.quests.["$sum_act"].descr);
		if(qty == 16)
			goto noneed;
		pc.quests.["$sum_act"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say This has the power to activate the raw elemental crystals!", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 16.", self);
	}
	else if((item.symname == "q_air@faeries2"))
	{
		if(not("$sum_air" in pc.quests))	
			addextra(pc.quests,{"$sum_air"},"1");
		qty := atoi(pc.quests.["$sum_air"].descr);
		if(qty == 5)
			goto noneed;
		pc.quests.["$sum_earth"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Crystalized elemental air. It is more beautiful than even the rumors suggest.", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 5.", self);
	}
	else if((item.symname == "q_fire@faeries2"))
	{
		if(not("$sum_fire" in pc.quests))	
			addextra(pc.quests,{"$sum_fire"},"1");
		qty := atoi(pc.quests.["$sum_fire"].descr);
		if(qty == 5)
			goto noneed;
		pc.quests.["$sum_fire"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Crystalized elemental fire. I can sense its power.", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 5.", self);
	}
	else if((item.symname == "q_water@faeries2"))
	{
		if(not("$sum_water" in pc.quests))	
			addextra(pc.quests,{"$sum_water"},"1");
		qty := atoi(pc.quests.["$sum_water"].descr);
		if(qty == 5)
			goto noneed;
		pc.quests.["$sum_water"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Crystalized elemental water. A wonder of nature!", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 5.", self);
	}
	else if((item.symname == "q_earth@faeries2"))
	{
		if(not("$sum_earth" in pc.quests))	
			addextra(pc.quests,{"$sum_earth"},"1");
		qty := atoi(pc.quests.["$sum_earth"].descr);
		if(qty == 5)
			goto noneed;
		pc.quests.["$sum_earth"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Crystalized elemental earth. Marvelous!", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 5.", self);
	}
	else if((item.symname == "ball_lightning@akaren"))
	{
		if(not("$sum_ball" in pc.quests))	
			addextra(pc.quests,{"$sum_ball"},"1");
		qty := atoi(pc.quests.["$sum_ball"].descr);
		if(qty == 10)
			goto noneed;
		pc.quests.["$sum_ball"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Energy in its purest form! The raw power is incredible.", self);
		exec("emote tucks the "+item.title+" into her robes.", self);
		exec("say You have now given me "+itoa(qty + 1)+" of the requisite 10.", self);
	}
	else
	{
:noneed:
		exec("say Your "+item.title+" is of interest "+pc.name+", but note relevant to the task at hand.", self);
		unsecure(item);
		exec("give "+item.name+" "+pc.name, self);
		exec("drop "+item.name, self);
	}
	
	
	
:checkit:

	if((atoi(pc.quests.["$sum_earth"].descr) == 5) and (atoi(pc.quests.["$sum_air"].descr) == 5) and 
		(atoi(pc.quests.["$sum_fire"].descr) == 5) and (atoi(pc.quests.["$sum_water"].descr) == 5) and
		(atoi(pc.quests.["$sum_ball"].descr) == 10) and (atoi(pc.quests.["$sum_act"].descr) == 16))
	{
		exec("say It has taken an incredible effort to collect these raw ingredients, "+pc.name+"!" ,self);
		exec("say I can now perform the requested incantations, and create the materials The Blacksmith requires.", self);
		
		subextra(pc.quests, SUMMONER_ONGOING);
		subextra(pc.quests, "$sum_ball");
		subextra(pc.quests, "$sum_act");
		addextra(pc.quests, {SUMMONER_COMPLETEISH},"");
		pc.quests.["$sum_earth"].descr := "0";
		pc.quests.["$sum_air"].descr := "0";
		pc.quests.["$sum_water"].descr := "0";
		pc.quests.["$sum_fire"].descr := "0";
		exec("say The incantations are not uncomplicated, and the materials produced are significant in terms of size.", self);
		exec("say When you are ready, simply mention to me your need for a new element, and I will complete the process.", self);
		
	}

	
:donezo:

	unsecure(item);
	unsecure(pc);
	goto start;

}
dilend

dilbegin qsummoner3();
var
	pc : unitptr;
	item : unitptr;
	qty_air : integer;
	qty_fire : integer;
	qty_water : integer;
	qty_earth : integer;
code
{

	heartbeat := PULSE_SEC*1;
:start:

	wait(SFB_DONE, command("say") and ("element" in argument) and (SUMMONER_COMPLETEISH in activator.quests));
		
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	exec("say So, "+pc.name+" you are ready to deliver another batch of activated elemental powder to The Blacksmith.",self);
	
	qty_earth := atoi(pc.quests.["$sum_earth"].descr);
	qty_air := atoi(pc.quests.["$sum_air"].descr);
	qty_water := atoi(pc.quests.["$sum_water"].descr);
	qty_fire := atoi(pc.quests.["$sum_fire"].descr);
	if(qty_earth < 4)
	{
		qty_earth := qty_earth + 1;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		pc.quests.["$sum_earth"].descr := itoa(qty_earth);
		exec("emote pulls a ball of energy from within her robes and begins to incant.",self);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n's ball of energy floats into the air, and begins to vibrate violently.",A_ALWAYS, self, null, null, TO_ALL);
		act("An <div class='cpc'>electric light</div> intensifies and fills every corner of the room.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n holds a <div class='cpn'>dark jewel</div> in one hand, and <div class='cpy'>an elemental activator</div> in the other.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The ball <div class='cpc'>arcs</div> to each of The Summoner's hands.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The <div class='cpc'>electric light</div> becomes complete, and culminates in a <div class='cpc'>b</div><div class='cpw'>linding</div> <div class='cpc'>f</div><div class='cpw'>lash</div>.",A_ALWAYS, self, null, null, TO_ALL);
		item := load("earth"+itoa(qty_earth)+"@bounty");
		link(item,self.outside);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("A large pile of "+item.title+" is left as the light fades.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("emote slumps down, seemingly exhausted.",self);
	}
	else if(qty_air < 4)
	{
		qty_air := qty_air + 1;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		pc.quests.["$sum_air"].descr := itoa(qty_air);
		exec("emote pulls a ball of energy from within her robes and begins to incant.",self);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n's ball of energy floats into the air, and begins to vibrate violently.",A_ALWAYS, self, null, null, TO_ALL);
		act("An <div class='cpc'>electric light</div> intensifies and fills every corner of the room.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n holds a <div class='cpw'>white jewel</div> in one hand, and <div class='cpy'>an elemental activator</div> in the other.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The ball <div class='cpc'>arcs</div> to each of The Summoner's hands.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The <div class='cpc'>electric light</div> becomes complete, and culminates in a <div class='cpc'>b</div><div class='cpw'>linding</div> <div class='cpc'>f</div><div class='cpw'>lash</div>.",A_ALWAYS, self, null, null, TO_ALL);
		item := load("air"+itoa(qty_air)+"@bounty");
		link(item,self.outside);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("A large pile of "+item.title+" is left as the light fades.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("emote slumps down, seemingly exhausted.",self);
	}
	else if(qty_water < 4)
	{
		qty_water := qty_water + 1;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		pc.quests.["$sum_water"].descr := itoa(qty_water);
		exec("emote pulls a ball of energy from within her robes and begins to incant.",self);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n's ball of energy floats into the air, and begins to vibrate violently.",A_ALWAYS, self, null, null, TO_ALL);
		act("An <div class='cpc'>electric light</div> intensifies and fills every corner of the room.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n holds a <div class='cb'>light blue jewel</div> in one hand, and <div class='cpy'>an elemental activator</div> in the other.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The ball <div class='cpc'>arcs</div> to each of The Summoner's hands.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The <div class='cpc'>electric light</div> becomes complete, and culminates in a <div class='cpc'>b</div><div class='cpw'>linding</div> <div class='cpc'>f</div><div class='cpw'>lash</div>.",A_ALWAYS, self, null, null, TO_ALL);
		item := load("water"+itoa(qty_water)+"@bounty");
		link(item,self.outside);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("A large pile of "+item.title+" is left as the light fades.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("emote slumps down, seemingly exhausted.",self);
	}
	else if(qty_fire < 4)
	{
		qty_fire := qty_fire + 1;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		pc.quests.["$sum_fire"].descr := itoa(qty_fire);
		exec("emote pulls a ball of energy from within her robes and begins to incant.",self);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n's ball of energy floats into the air, and begins to vibrate violently.",A_ALWAYS, self, null, null, TO_ALL);
		act("An <div class='cpc'>electric light</div> intensifies and fills every corner of the room.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("$1n holds a <div class='cpr'>blood red jewel</div> in one hand, and <div class='cpy'>an elemental activator</div> in the other.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The ball <div class='cpc'>arcs</div> to each of The Summoner's hands.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("The <div class='cpc'>electric light</div> becomes complete, and culminates in a <div class='cpc'>b</div><div class='cpw'>linding</div> <div class='cpc'>f</div><div class='cpw'>lash</div>.",A_ALWAYS, self, null, null, TO_ALL);
		item := load("fire"+itoa(qty_fire)+"@bounty");
		link(item,self.outside);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("A large pile of "+item.title+" is left as the light fades.",A_ALWAYS, self, null, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("emote slumps down, seemingly exhausted.",self);
	}
	
:checkme:

	if((qty_earth == 4) and (qty_air == 4) and (qty_water == 4) and (qty_fire == 4))
	{
		subextra(pc.quests, "$sum_earth");
		subextra(pc.quests, "$sum_air");
		subextra(pc.quests, "$sum_water");
		subextra(pc.quests, "$sum_fire");
		subextra(pc.quests, SUMMONER_COMPLETEISH);
		addextra(pc.quests, {SUMMONER_COMPLETE},"");
	}
		
:donezo:

	unsecure(pc);
	goto start;
}
dilend

dilbegin qjeweler();
var
	pc : unitptr;
code
{
	heartbeat := PULSE_SEC*4;
:start:

	// package deliver streak - 100
	// 20 each of birthstones
	
	// pearl_stone@blcastle (pearl)
	// red1_stone@blcastle (ruby)
	// purple_stone@blcastle (moonstone)
	// red_stone@blcastle (jade)
	// cless_stone@blcastle (diamond)
	// lblue_stone@blcastle (bloodstone)
	// emerald_stone@blcastle (emerald)
	// green_stone@blcastle (onyx)
	// blue_stone@blcastle (sapphire)
	// mblue_stone@blcastle (jasper)
	// yellow_stone@blcastle (agate)
	// pink_stone@blcastle (opal)
	

	wait(SFB_CMD, ("$historian" in activator.extra) and (JOIN_ONGOING in activator.quests) and (not(JEWELER_ONGOING in activator.quests)));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I've been watching your progress, "+pc.name+".",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say There is much more for you to do, should you choose to follow the way.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The enemy is upon us, and we'll need every weapon in our posession.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The Blacksmith has his arms and armors, however they will only go so far.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There is a softer and less tangible weapon at our disposal, and we'll need that as well.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The ask is hurculean, though so is the need.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote pauses for ephasis.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The packages I send out work to build allies across the kingdom.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say They recruit friends to our cause, and earn us favors to call in.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say This is the other side of The Guild that is less visible in the world than that of The Blacksmith and The Bounty Hunter.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Yet, it provides a powerful incentive.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say For what is to come, we'll need to prepare a huge number of highly valuable packages.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say They'll be sent far and wide, to every corner of this world.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say In order to achieve this, I'll need more supplies than are available to me today.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Precious gemstones. Each with its own unique glow.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There are twelve varieties to be found across the land.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'll require 20 of each.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say In order to distribute these in the limited time we have, it will require great effort.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say You'll need to close a streak of 100 consecutive package deliveries.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Return to me to deliver the stones, and to recieve packages.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say And hurry! The enemy will not wait for our work.", self);
	addextra(pc.quests, {JEWELER_ONGOING}, "");
	
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qjeweler2();
var
	pc : unitptr;
	item : unitptr;
	qty : integer;
code
{	// package deliver streak - 100
	// 20 each of birthstones
	
	// pearl_stone@blcastle (pearl)
	// red1_stone@blcastle (ruby)
	// purple_stone@blcastle (moonstone)
	// red_stone@blcastle (jade)
	// cless_stone@blcastle (diamond)
	// lblue_stone@blcastle (bloodstone)
	// emerald_stone@blcastle (emerald)
	// green_stone@blcastle (onyx)
	// blue_stone@blcastle (sapphire)
	// mblue_stone@blcastle (jasper)
	// yellow_stone@blcastle (agate)
	// pink_stone@blcastle (opal)
	
	heartbeat := PULSE_SEC*1;
:start:

	wait(SFB_DONE, command("give") and (JEWELER_ONGOING in activator.quests) and (target == self));
	
	pc := activator;
	secure(pc, donezo);
	item := medium;
	
	if((item.symname == "pearl_stone@blcastle") and (not ("pearl" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_pearl" in pc.quests))	
			addextra(pc.quests,{"$jeweler_pearl"},"0");
		qty := atoi(pc.quests.["$jeweler_pearl"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "pearl");
			goto noneed;
		}
		pc.quests.["$jeweler_pearl"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say A fine specimen of a pearl!", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "red1_stone@blcastle") and (not ("ruby" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_ruby" in pc.quests))	
			addextra(pc.quests,{"$jeweler_ruby"},"0");
		qty := atoi(pc.quests.["$jeweler_ruby"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "ruby");
			goto noneed;
		}
		pc.quests.["$jeweler_ruby"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say The red of this ruby is stunning, is it not?", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "purple_stone@blcastle") and (not ("moonstone" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_moonstone" in pc.quests))	
			addextra(pc.quests,{"$jeweler_moonstone"},"0");
		qty := atoi(pc.quests.["$jeweler_moonstone"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "moonstone");
			goto noneed;
		}
		pc.quests.["$jeweler_moonstone"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say A truly unique stone, the moonstone.", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "red_stone@blcastle") and (not ("jade" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_jade" in pc.quests))	
			addextra(pc.quests,{"$jeweler_jade"},"0");
		qty := atoi(pc.quests.["$jeweler_jade"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "jade");
			goto noneed;
		}
		pc.quests.["$jeweler_jade"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Marvelous green in this Jade, "+pc.name+".", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "cless_stone@blcastle") and (not ("diamond" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_diamond" in pc.quests))	
			addextra(pc.quests,{"$jeweler_diamond"},"0");
		qty := atoi(pc.quests.["$jeweler_diamond"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "diamond");
			goto noneed;
		}
		pc.quests.["$jeweler_diamond"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say There is no other stone like a diamond, "+pc.name+".", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "lblue_stone@blcastle") and (not ("bloodstone" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_bloodstone" in pc.quests))	
			addextra(pc.quests,{"$jeweler_bloodstone"},"0");
		qty := atoi(pc.quests.["$jeweler_bloodstone"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "bloodstone");
			goto noneed;
		}
		pc.quests.["$jeweler_bloodstone"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say The contrast of colors in this bloodstone is catching, is it not "+pc.name+"?", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "emerald_stone@blcastle") and (not ("emerald" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_emerald" in pc.quests))	
			addextra(pc.quests,{"$jeweler_emerald"},"0");
		qty := atoi(pc.quests.["$jeweler_emerald"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "emerald");
			goto noneed;
		}
		pc.quests.["$jeweler_emerald"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say A gemstone quality emerald. This will be valued.", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "green_stone@blcastle") and (not ("onyx" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_onyx" in pc.quests))	
			addextra(pc.quests,{"$jeweler_onyx"},"0");
		qty := atoi(pc.quests.["$jeweler_onyx"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "onyx");
			goto noneed;
		}
		pc.quests.["$jeweler_onyx"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Outstanding contrast in the banding on this onyx "+pc.name+".", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "blue_stone@blcastle") and (not ("sapphire" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_sapphire" in pc.quests))	
			addextra(pc.quests,{"$jeweler_sapphire"},"0");
		qty := atoi(pc.quests.["$jeweler_sapphire"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "sapphire");
			goto noneed;
		}
		pc.quests.["$jeweler_sapphire"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say A sapphire fit for a queen!", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "mblue_stone@blcastle") and (not ("jasper" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_jasper" in pc.quests))	
			addextra(pc.quests,{"$jeweler_jasper"},"0");
		qty := atoi(pc.quests.["$jeweler_jasper"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "jasper");
			goto noneed;
		}
		pc.quests.["$jeweler_jasper"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say I've always loved the uniqueness of jasper carvings.", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "yellow_stone@blcastle") and (not ("agate" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_agate" in pc.quests))	
			addextra(pc.quests,{"$jeweler_agate"},"0");
		qty := atoi(pc.quests.["$jeweler_agate"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "agate");
			goto noneed;
		}
		pc.quests.["$jeweler_agate"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say Agate seems as if it could hardly be made by nature, dont you think "+pc.name+"?", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}
	else if((item.symname == "pink_stone@blcastle") and (not ("opal" in pc.quests.[JEWELER_ONGOING].names)))
	{
		if(not("$jeweler_opal" in pc.quests))	
			addextra(pc.quests,{"$jeweler_opal"},"0");
		qty := atoi(pc.quests.["$jeweler_opal"].descr);
		if(qty == 20)
		{
			addstring(pc.quests.[JEWELER_ONGOING].names, "opal");
			goto noneed;
		}
		pc.quests.["$jeweler_opal"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say This opal is an iridescent wonder!", self);
		exec("say That makes "+itoa(qty + 1)+" of the 20 I need.", self);
	}	
	else
	{
:noneed:
		exec("say I'll not be able to use this "+item.title+" "+pc.name+".", self);
		unsecure(item);
		exec("give "+item.name+" "+pc.name, self);
		exec("drop "+item.name, self);
	}
	
:streak:
	if((atoi(pc.extra.["$package_max"].descr) >= 100) and (not("$packages" in pc.quests.[JEWELER_ONGOING].names)))
		addstring(pc.quests.[JEWELER_ONGOING].names, "packages");
	
:checkit:

	if(("pearl" in pc.quests.[JEWELER_ONGOING].names) and ("ruby" in pc.quests.[JEWELER_ONGOING].names) and 
		("moonstone" in pc.quests.[JEWELER_ONGOING].names) and ("jade" in pc.quests.[JEWELER_ONGOING].names) and 
		("diamond" in pc.quests.[JEWELER_ONGOING].names) and ("bloodstone" in pc.quests.[JEWELER_ONGOING].names) and 
		("emerald" in pc.quests.[JEWELER_ONGOING].names) and ("onyx" in pc.quests.[JEWELER_ONGOING].names) and 
		("sapphire" in pc.quests.[JEWELER_ONGOING].names) and ("jasper" in pc.quests.[JEWELER_ONGOING].names) and 
		("agate" in pc.quests.[JEWELER_ONGOING].names) and ("opal" in pc.quests.[JEWELER_ONGOING].names) and 
		("packages" in pc.quests.[JEWELER_ONGOING].names))
	{
		exec("say Incredible! This is no small quantity of stones, and that streak is impressive indeed." ,self);
		exec("say These packages will go out immediately "+pc.name+"!" ,self);
		exec("say You may go and let The Historian know that your tasks for me are complete.", self);
		
		subextra(pc.quests, JEWELER_ONGOING);
		addextra(pc.quests, {JEWELER_COMPLETE},"");
	}
	
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qnecro();
var
	pc : unitptr;
code
{
	heartbeat := PULSE_SEC*4;
:start:
	// life_crystal1@arma - 15
	// fake_sash@mordenkin
	// maleus@isledead
	// skin of shadow@soullake
	// scythe@yamruins
	
	wait(SFB_CMD, (JOIN_ONGOING in activator.quests) and (SUMMONER_ONGOING in activator.quests) and (not(NECRO_ONGOING in activator.quests)) and (not(NECRO_COMPLETE in activator.quests)) and (not(NECRO_COMPLETEISH in activator.quests)));
	
	pc := activator;
	secure(pc, donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Well then "+pc.name+", speak.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
    exec("say You didnt seem to find that locked door a detterant, why then sit here quietly and waste my time?", self);	
	
	wait(SFB_CMD, (command("say") and ("summoner" == argument)));
	
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I see.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say That Summoner wants me to spend my precious preparation time helping him with his silly incantations.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say He thinks much of his own importance.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote shrugs.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I have needs of my own.", self);
    wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say If you can bring me a few things, I will support your work with The Summoner.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Away near a place with infinite possibilities which has plagued generations of heros...", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There is a book, known as the most evil book to ever grace the earth.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Bring this to me.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Deep in ancient land removed from this world by a powerful magic...", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There is a weapon of blood and hate.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I desire this, bring it to me.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Away in his castle on high, above a lake that echoes with the sighs of those long past.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say A sorcerer seeks the skin of shadow.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Bring it to me instead.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Far from here is a mine ruled by a dead dwarf.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I appreciate his tenuous relationship with life.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Whats more, he has a dark sash with a pocket! How cool is that!?", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("emote pointedly clears his throat.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I mean...", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I command you to bring this to me!", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There will be but one more task.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say There is an item which holds the essence of life itself.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say It is manifest as a crystal of rainbow colors.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The study of these items is critical to my work.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'd think that 15 of them will suffice.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I believe you have your work cut out for you. Go now.", self);
	addextra(pc.quests, {NECRO_ONGOING}, "0");
	
:donezo:

	unsecure(pc);
	goto start;

}
dilend

dilbegin qnecro2();
var
	pc : unitptr;
	item : unitptr;
	qty : integer;
code
{
	// life_crystal1@arma - 15
	// fake_sash@mordenkin
	// maleus@isledead
	// skin of shadow@soullake
	// scythe@yamruins
	
	heartbeat := PULSE_SEC*1;
:start:

	wait(SFB_DONE, command("give") and (SUMMONER_ONGOING in activator.quests) and (target == self));
	
	pc := activator;
	secure(pc, donezo);
	item := medium;
	secure(item,donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	
	if((item.symname == "life_crystal1@arma") and (not ("crystals" in pc.quests.[NECRO_ONGOING].names)))
	{
		if(not("$nec_lc" in pc.quests))	
			addextra(pc.quests,{"$nec_lc"},"0");
		qty := atoi(pc.quests.["$nec_lc"].descr);
		if(qty == 15)
		{
			addstring(pc.quests.[NECRO_ONGOING].names, "crystals");
			goto noneed;
		}
		pc.quests.["$nec_lc"].descr := itoa(qty + 1);
		unsecure(item);
		destroy(item);
		exec("say The very essence of life!", self);
		if ("skin" in pc.quests.[NECRO_ONGOING].names)
			exec("emote purposefully tucks "+item.title+" into the pocket of his sash.", self);
		else
			exec("emote pats his chest as if looking for a pocket, then dejectedly tucks the "+item.title+" into his robes.", self);
		exec("say This is "+itoa(qty + 1)+" of the 15 I need.", self);
	}	
	else if((item.symname == "fake_sash@mordenkin") and (not ("sash" in pc.quests.[NECRO_ONGOING].names)))
	{
		act("A noticeable gleam appears in $1n's otherwise dead eyes.",A_SOMEONE, self, null, null, TO_ALL);
		act("$1n quietly slides his hand into $2n's pocket.",A_SOMEONE, self, item, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say I see you've found it!", self);
		addstring(pc.quests.[NECRO_ONGOING].names, "sash");
		exec("say Very well then.", self);
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "maleus@isledead") and (not ("book" in pc.quests.[NECRO_ONGOING].names)))
	{
		act("$1n thumbs through the pages of $2n.",A_SOMEONE, self, item, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say It is said that it contains the most depraved wisdom ever revealed to mortals.", self);
		addstring(pc.quests.[NECRO_ONGOING].names, "book");
		unsecure(item);
		destroy(item);
	}
	else if((item.symname == "scythe@yamruins") and (not ("scythe" in pc.quests.[NECRO_ONGOING].names)))
	{
		act("$1n takes a swipe through the air with his $2n.",A_SOMEONE, self, item, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say This is trule a weapon a necromancer can be proud of!", self);
		addstring(pc.quests.[NECRO_ONGOING].names, "scythe");
		unsecure(item);
		destroy(item);
	}
	else if ((item.symname == "base_skin@skills") and (item.outside_descr == "A large pile of skin from The corpse of a demon shadow is laying here.") and (not ("skin" in pc.quests.[NECRO_ONGOING].names)))
	{
		act("$1n carefully examines the $2n.",A_SOMEONE, self, item, null, TO_ALL);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say Incredible to see this with... to see this.", self);
		addstring(pc.quests.[NECRO_ONGOING].names, "skin");
		unsecure(item);
		destroy(item);
	}
	else
	{
:noneed:
		exec("say Why did you bring me "+item.title+" "+pc.name+"?", self);
		unsecure(item);
		exec("give "+item.name+" "+pc.name, self);
		exec("drop "+item.name, self);
	}
	
:checkit:

	if(("scythe" in pc.quests.[NECRO_ONGOING].names) and ("book" in pc.quests.[NECRO_ONGOING].names) and 
		("skin" in pc.quests.[NECRO_ONGOING].names) and ("sash" in pc.quests.[NECRO_ONGOING].names) and 
		("crystals" in pc.quests.[NECRO_ONGOING].names) and ("packages" in pc.quests.[NECRO_ONGOING].names))
	{
		exec("say This is all that I required from you "+pc.name+". Consider me impressed." ,self);
		exec("say You may go and let The Historian know that your tasks for me are complete.", self);
		
		subextra(pc.quests, NECRO_ONGOING);
		addextra(pc.quests, {NECRO_COMPLETE},"");
	}

	
:donezo:

	unsecure(item);
	unsecure(pc);
	goto start;

	
}
dilend


dilbegin pray();
var
  pc : unitptr;
  exdp : extraptr;
  tt : integer;

code
{
	heartbeat:= PULSE_SEC*4;

:start:
	wait(SFB_CMD, command("pray") and ((JOIN_ONGOING in activator.quests) or (JOIN_COMPLETE in activator.quests)));
	
	block;
	pc := activator;
	secure(pc,lostpc);
	
	act("You kneel and begin to pray.",A_ALWAYS, pc, null, null, TO_CHAR); 
	act("$1n kneels and begins to pray.",A_SOMEONE, pc, null, null, TO_REST);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
   tt:=atoi(self.extra.["$PK_TIMER"].descr);
	if(not(realtime-tt>600))
	{
		act("As you pray, a sense that recent battles prevent focus.",A_ALWAYS, pc, null, null, TO_CHAR);
		goto lostpc;
	}
	act("As you pray, a sense of purpose builds within you.",A_ALWAYS, pc, null, null, TO_CHAR); 	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("The light of the candles slowly stops its flickering, and steadies.",A_ALWAYS, pc, null, null, TO_ALL); 
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("The light begins to intensify, the formerly dark room is now bright as day.",A_ALWAYS, pc, null, null, TO_ALL);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("The world around you begins to dissolve.",A_ALWAYS, pc, null, null, TO_CHAR); 
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("There is a <div class='cpy'>bright flash</div>!",A_ALWAYS, pc, null, null, TO_ALL);
	link(pc,findroom("sanctum@bounty"));
	exec("look",pc);
	act("The candle light returns to its flickering.",A_ALWAYS, pc, null, null, TO_ROOM); 
	
:lostpc:
	unsecure(pc);
	goto start;
}
dilend // END Pray

dilbegin pray2();
var
  pc: unitptr;
  exdp: extraptr;

code
{
	heartbeat := PULSE_SEC*2;

:start:
	wait(SFB_CMD, command("pray") and ((JOIN_ONGOING in activator.quests) or (JOIN_COMPLETE in activator.quests)));
	block;
	pc := activator;
	secure(pc,lostpc);
	act("You kneel and begin to pray.",A_ALWAYS, pc, null, null, TO_CHAR); 
	act("$1n kneels and begins to pray.",A_SOMEONE, pc, null, null, TO_REST);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("There is a <div class='cpw'>cold draft</div>.",A_ALWAYS, pc, null, null, TO_ALL);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("The world around you dissolves.",A_ALWAYS, pc, null, null, TO_CHAR); 
	link(pc,findroom("shrine@bounty"));
	exec("look",pc);
	act("The room returns to normal.",A_ALWAYS, pc, null, null, TO_ROOM); 
:lostpc:
	unsecure(pc);
	goto start;
}
dilend // END Pray2

dilbegin feast();
var
	pc : unitptr;
	u : unitptr;
code
{
	heartbeat:=PULSE_SEC*6;
	
:start:
	
	wait(SFB_CMD, command("feast") and ((JOIN_ONGOING in activator.quests) or (JOIN_COMPLETE in activator.quests)));

	block;
	pc:= activator;
	secure(pc,lostpc);
	
	act("You sit and partake in the hunters feast.",A_ALWAYS, pc, null, null, TO_CHAR);
	act("$1n sits and partakes in the hunters feast.",A_ALWAYS, pc, null, null, TO_REST);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	if(not("$feasted" in pc.extra))
	{
		act("You have an uneasy feeling that you're being watched.",A_ALWAYS, pc, null, null, TO_CHAR);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("As you continue eating the feeling grows stronger.",A_ALWAYS, pc, null, null, TO_CHAR);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		act("You suddenly realize that you are not alone.",A_ALWAYS, pc, null, null, TO_CHAR);
		u := load("guide@bounty");
		goto lostpc;
	}
	act("You finish eating, and take a moment to rest.",A_ALWAYS, pc, null, null, TO_CHAR);
	exec("rest",pc);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	pc.hp := pc.max_hp;
	pc.endurance := pc.max_endurance;
	pc.mana := pc.max_mana;
	pc.full:=24;
	pc.thirst:=24;
	act("You feel fully restored.",A_ALWAYS, pc, null, null, TO_CHAR);
	
	:lostpc:
	unsecure(pc);
	goto start;
}
dilend // END Feast

dilbegin expel();
var
	pc:unitptr;
code
{
	heartbeat := PULSE_SEC;
	
:start:
	
	wait(SFB_PRE, command(CMD_AUTO_DAMAGE) and (target == self));

	pc:= activator;
	secure(pc,lostpc);
	
	exec("say It is a special stype of fool who would attack me here.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	act("$1n gestures, and the world fades.",A_SOMEONE, self, pc, null, TO_CHAR);
	act("$1n gestures, and $2n begins to fade.",A_SOMEONE, self, pc, null, TO_ROOM);
	pc.hp := 0;
	pc.endurance := 0;
	pc.mana := 0;
	subextra(pc.extra, "$daily_streak");
	position_update(pc);
	link(pc,findroom("entry_room@bounty"));
	act("You feel a searing pain!",A_SOMEONE, self, pc, null, TO_CHAR);
:lostpc:
	unsecure(pc);
	goto start;
}
dilend // END Expel

dilbegin qguide();
var
	pc:unitptr;
code
{
	heartbeat:=PULSE_SEC*4;
	
:start:
	
	wait(SFB_CMD, (activator.type == UNIT_ST_PC) and (JOIN_ONGOING in activator.quests) and (not("$feasted" in activator.extra)));

	pc:= activator;
	secure(pc,lostpc);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Please, dont let me interrupt you partaking of this feast.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say After all, it was prepared just for your arrival.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I do however have... a question for you.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say The Bounty Hunters have been here for a period of time which extends beyond our records.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Indeed, The Historian believes this collective has existed since before ANY written records.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say I'll be frank, "+pc.name+". Our guild is at risk.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Our way of living is at risk.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say A great enemy is preparing to unleash its fury upon us.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say While we have worked at the services of emperors, kings, demons and angels, a new force" +
		" which considers itself the face of a just world is rising.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say While we have never operated in the shadows, and certainly consider our role one that works" +
		" to bring balance in the world, some believe we need to be destroyed.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("ponder",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Trust is hard to come by, but I believe you can be relied on.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Go and speak to The Historian. He can give you further guidance.", self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say One final note - you may leave here and return at any time. Resume your prayers in the Inner Sanctum, and you will find yourself returned to the world outside.", self);
	pc.hp := pc.max_hp;
	pc.endurance := pc.max_endurance;
	pc.mana := pc.max_mana;
	pc.full:=24;
	pc.thirst:=24;
	act("As you finish the feast, you feel fully restored.",A_ALWAYS, pc, null, null, TO_CHAR);
	addextra(pc.extra,{"$feasted"},"0");
	position_update(pc);
	act("You suddenly notice that The Guide is no longer here.",A_ALWAYS, pc, null, null, TO_ALL);
	destroy(self);
	
:lostpc:

	unsecure(pc);
	goto start;
}
dilend // END Guide

dilbegin recall spree_f(dur : integer);
var
	st : integer;
code
{
	
	heartbeat := PULSE_SEC*10;
	subextra(self.extra,"$SPREE_TIMER");
	addextra(self.extra,{"$SPREE_TIMER"},itoa(realtime));
	
:start:
	
	wait(SFB_DEAD|SFB_TICK, (command(CMD_AUTO_DEATH) and (activator == self.fighting)) or (command(CMD_AUTO_TICK)));
	
	if(command(CMD_AUTO_DEATH))
		send("kill");
	if(command(CMD_AUTO_TICK))
	{
		st := atoi(self.extra.["$SPREE_TIMER"].descr);
		if(realtime - st > ((dur + 1) * 60))
		{
			self.extra.["$spree_total"].descr := itoa(atoi(self.extra.["$spree_total"].descr)+1);
			subextra(self.extra,"$spree_streak");
			addextra(self.extra,{"$spree_streak"},itoa(0));
			self.extra.["$DAILY_SPREE"].descr := replace("ongoing","FAIL",self.extra.["$DAILY_SPREE"].descr); 
			quit;
		}
	}
		
	goto start;
}
dilend // END spree_f

// duration is number of minutes, amt is amount of xp in thousands, 
// n is the number of kills, and stype is "duration","xp","kills", or a 
// combination in the format "duration|xp|kills"
// this function is for followers, and sends results to the group master
dilbegin aware recall spree_m(dur : integer, amt : integer, n : integer, stype : integer);
external
	string stringdate@bounty (n : integer);
var
	st : integer; // spree time
	sc : integer; // spree count
	sx : integer; // spree xp
	bx : integer; // baseline xp
	kn : integer; // kills needed
	xn : integer; // xp needed
	seconds : integer;
	minutes : integer;
	i : integer;
	u : unitptr;
	arg : string;
	sdate 	: string;
	sl : stringlist;
code
{
:init:

	subextra(self.extra,"$SPREE_TIMER");
	addextra(self.extra,{"$SPREE_TIMER"},itoa(realtime));

	bx := self.exp;
	sc := 0;
	
	heartbeat := PULSE_SEC*10;
	sdate := stringdate(3);
	
:start:
	
	arg := "tick";
	
	wait(SFB_MSG|SFB_TICK,(command(CMD_AUTO_MSG) and (argument == "kill")) or (command(CMD_AUTO_TICK)));
	
	if(argument == "kill")
		arg := argument;
	
	st := atoi(self.extra.["$SPREE_TIMER"].descr);

	
	if(realtime - st > (dur * 60))
		goto donezo;
	if(arg == "tick")
		goto start;
	
	sc := sc + 1;
	sx := self.exp - bx;
	
	foreach(UNIT_ST_PC,u)
	{
		sl := split(u.extra.["$DAILY_SPREE"].descr,"|");
		if(((u.master == self) or (u == self)) and dilfind("spree_f@bounty",u) and (sl.[0] == sdate) and (sl.[1] == "ongoing") and (sl.[2] == self.name))
		{
			kn := n - sc;
			if(kn < 0)
				kn := 0;
			xn := (amt * 1000)- sx;
			if(xn < 0)
				xn := 0;
			sendtext ("You need "+itoa(kn)+" kills and "+itoa(xn)+" experience to complete your spree.<br/>",u);
			
		:check_time:

			seconds := realtime - st;
			seconds := (60 * dur) - seconds;
			minutes := seconds / 60;
			
			if (minutes < 1)
			{
				if (seconds == 1)
					sendtext ("You have 1 more second before your spree ends.<br/>",u);
				else
					sendtext ("You have "+itoa(seconds)+" more seconds before your spree ends.<br/>",u);
			}
			else
			{
				seconds := seconds - (minutes * 60);
				if ((minutes == 1) and (seconds == 1))
					sendtext ("You have 1 minute and 1 second before your spree ends.<br/>",u);
				else if (minutes == 1)
					sendtext ("You have 1 minute and "+itoa(seconds)+" seconds before your spree ends.<br/>",u);
				else if (seconds == 1)
					sendtext ("You have "+itoa(minutes)+" minutes and 1 second before your spree ends.<br/>",u);
				else
					sendtext ("You have "+itoa(minutes)+" minutes and "+itoa(seconds)+" seconds before your spree ends.<br/>",u);
			}
		}
	}
	goto start;
	
:donezo:

	kn := n - sc;
	if(kn < 0)
		kn := 0;
	xn := (amt * 1000) - sx;
	if(xn < 0)
		xn := 0;
	
	sl := split(self.extra.["$DAILY_SPREE"].descr,"|");
	if((kn == 0) and (xn == 0))
	{
		log("Spree Tracker: "+self.name+" has lead a successful spree of type "+sl.[3]+" with "+itoa(sc)+"/"+itoa(n)+" kills and "+itoa(sx)+"/"+itoa(amt)+"000 XP in "+itoa(dur - 1 - minutes)+":"+itoa(60 - seconds)+". Duration was "+itoa(dur)+":00.");
		u := self;
		while (u.type==UNIT_ST_PC)
		{
			sendtext(self.name+" has just lead a successful spree with "+itoa(sc)+"/"+itoa(n)+" kills and "+itoa(sx)+"/"+itoa(amt)+"000 XP in "+itoa(dur - 1 - minutes)+":"+itoa(60 - seconds)+". Duration was "+itoa(dur)+":00.",u);
			u := u.gnext;
		}
	}
	else
		log("Spree Tracker: "+self.name+" failed to lead a spree of type "+sl.[3]+" with "+itoa(sc)+"/"+itoa(n)+" kills and "+itoa(sx)+"/"+itoa(amt)+"000 XP. Duration was "+itoa(dur)+":00.");
	
	foreach(UNIT_ST_PC,u)
	{
		if("$DAILY_SPREE" in u.extra)
		{
			sl := split(u.extra.["$DAILY_SPREE"].descr,"|");
			if(((u.master == self) or (u == self)) and (sl.[0] == sdate) and (sl.[1] == "ongoing") and (sl.[2] == self.name))
			{	
				
				subextra(u.extra,"$SPREE_XP");
				addextra(u.extra,{"$SPREE_XP"},itoa(sx));
				subextra(u.extra,"$SPREE_COUNT");
				addextra(u.extra,{"$SPREE_COUNT"},itoa(sc));
				i := dildestroy("spree_f@bounty",u);
				act("<div class='cpr'>Your spree has come to an end! You bagged "+itoa(sc)+" kills and gained "+itoa(sx)+" experience.</div>",A_ALWAYS, u, null, null, TO_CHAR);
				if((kn == 0) and (xn == 0))
				{
					u.extra.["$spree_streak"].descr := itoa(atoi(u.extra.["$spree_streak"].descr)+1);
					u.extra.["$spree_total"].descr := itoa(atoi(u.extra.["$spree_total"].descr)+1);
					u.extra.["$DAILY_SPREE"].descr := replace("ongoing","SUCCESS",u.extra.["$DAILY_SPREE"].descr); 
					if(atoi(u.extra.["$spree_streak"].descr) > atoi(u.extra.["$spree_max"].descr))
						u.extra.["$spree_max"].descr := u.extra.["$spree_streak"].descr;
				}
				else
				{
					subextra(u.extra,"$spree_streak");
					addextra(u.extra,{"$spree_streak"},itoa(0));
					u.extra.["$DAILY_SPREE"].descr := replace("ongoing","FAIL",u.extra.["$DAILY_SPREE"].descr); 
				}
			}
		}
	}
	quit;
}
dilend // END spree_m


dilbegin new_spree();
external
	integer dateformat@bounty (s : string);
	string stringdate@bounty (n : integer);
var
	pc 		: unitptr;
	i 		: integer;
	dur 	: integer;
	amt 	: integer;
	n 		: integer;
	stype 	: integer;
	u 		: unitptr;
	tot 	: integer;
	arg 	: string;
	sdate 	: string;
	ssdate 	: string;
	idate 	: integer;
	isdate 	: integer;
	exdp 	: extraptr;
	sl		: stringlist;
	
code
{
:start:
	
	heartbeat := PULSE_SEC;
	wait(SFB_CMD, (command("say") and (("start spree" == argument) or ("spree" == argument) or ("killing spree" == argument)) and (activator.type == UNIT_ST_PC)));
		
	arg := argument;	
	
	pc := activator;
	secure(pc,donezo);
	
	sdate := stringdate(3);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exdp := "$daily_total" in pc.extra;
	if(exdp)
		tot := atoi(exdp.descr);
	exdp := "$monthly_total" in pc.extra;
	if(exdp)
		tot := tot + atoi(exdp.descr);
	exdp := "$bonus_total" in pc.extra;
	if(exdp)
		tot := tot + atoi(exdp.descr);
		
	if(self.outside.symname != "smithy@bounty")
	{
		exec("say Alas, I must return to my Smithy first.",self);
		goto donezo;
	}
	if(tot < 20)
	{
		exec("say You're yet to prove your readiness, "+pc.name+"!",self);
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("say Work some more bounties with the Hunter, and then come back to see me.",self);
		goto donezo;
	}	
	if(pc.master.master != pc)
	{
		exec("say Only a group leader can start a new killing spree!",self);
		goto donezo;
	}
	if("$DAILY_SPREE" in pc.extra)
	{
		sl := split(pc.extra.["$DAILY_SPREE"].descr,"|");
		if((sdate == sl.[0]) and (sl.[1] == "SUCCESS"))
		{
			exec("say You have already closed a killing spree today!",self);
			goto donezo;	
		}		
		if((sdate == sl.[0]) and (sl.[1] == "ongoing"))
		{
			exec("say Finish the spree you are on before starting a new one!",self);
			goto donezo;	
		}
	}
	if(arg == "start spree")
		goto killem;
	
	heartbeat := PULSE_SEC*3;
	exec("emote looks up from his work.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say So "+pc.name+", you'd like to help the Guild with a need?",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say This will be a task well beyond simply taking a bounty.",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Ensure that you and your allies have prepared for what is to come.",self);
	
:loop:

	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("say Nod your head to continue, otherwise shake.",self);

	wait(SFB_CMD, (activator == pc));
	
	if(command("nod"))
		goto killem;
	else if(command("shake"))
		goto donezo;
	else
		goto loop;

:killem:

	i := rnd(0,3);
	if(not("$spree_date" in self.outside.extra))
	{	
		addextra(self.outside.extra,{"$spree_date"},sdate);
		addextra(self.outside.extra,{"$spree_type"},itoa(i));
	}
	else 
	{
		ssdate := self.outside.extra.["$spree_date"].descr;
		idate := dateformat@bounty(sdate);
		isdate := dateformat@bounty(ssdate);
		if(idate > isdate)
		{
			subextra(self.outside.extra,"$spree_date");
			subextra(self.outside.extra,"$spree_type");
			addextra(self.outside.extra,{"$spree_date"},sdate);
			addextra(self.outside.extra,{"$spree_type"},itoa(i));
		}
	}
	
	stype := atoi(self.outside.extra.["$spree_type"].descr);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	if ((sdate == sl.[0]) and (sl.[1] == "FAIL"))
	{
		exec("say Perhaps you'll do a bit better this time, "+pc.name+".",self);	
	}
	else
		exec("say So you're ready to fight for the Guild?",self);
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	// these are the different streak types that can be utilized. Each has its own reward structure.
	if(stype == 0) 
	{
		dur := rnd(10,15);
		amt := dur * 4;
		n := dur * 8;
		exec("say This will be a "+itoa(dur)+" minute spree requiring "+itoa(n)+" kills and "+itoa(amt)+",000 xp.",self);
	}
	if(stype == 1)
	{
		dur := rnd(20,30);
		amt := dur * 3;
		n := dur * 7;
		exec("say This will be a "+itoa(dur)+" minute spree requiring "+itoa(n)+" kills and "+itoa(amt)+",000 xp.",self);
	}
	if(stype == 2)
	{
		dur := rnd(4,6);
		amt := 0;
		n := 0;
		exec("say This will be a "+itoa(dur)+" minute spree with no kill or xp minimums.",self);
	}
	if(stype == 3)
	{
		dur := rnd(10,30);
		amt := 0;
		n := dur * 12;
		exec("say This will be a "+itoa(dur)+" minute spree requiring "+itoa(n)+" kills and no xp minimum.",self);
	}	
	dilcopy ("spree_m@bounty("+itoa(dur)+","+itoa(amt)+","+itoa(n)+","+itoa(stype)+")",pc);
	
	
	heartbeat := PULSE_SEC;
	i := 5;
	while(i >= 0)
	{		
		foreach(UNIT_ST_PC,u)
		{
			if(not("$spree_max" in u.extra))
				addextra(u.extra,{"$spree_max"},"0");
			if(not("$spree_total" in u.extra))
				addextra(u.extra,{"$spree_total"},"0");
			if(not("$spree_streak" in u.extra))
				addextra(u.extra,{"$spree_streak"},"0");
			if(not("$DAILY_SPREE" in u.extra))
				addextra(u.extra,{"$DAILY_SPREE"},sdate+"|blank|blank|blank");
			sl := split(u.extra.["$DAILY_SPREE"].descr,"|");
			if(((u.master == pc) or (u == pc)) and (not(dilfind("spree_f@bounty", u))) and (not((sl.[0] == sdate) and ((sl.[1] == "CLOSED") or (sl.[1] == "ongoing")))))
			{
				if(i == 0)
				{	
					act("<div class='cpg'>== GO! ==</div>",A_ALWAYS, u, null, null, TO_CHAR);
					subextra(u.extra,"$DAILY_SPREE");
					addextra(u.extra,{"$DAILY_SPREE"},sdate+"|ongoing|"+pc.name+"|"+itoa(stype));
					dilcopy ("spree_f@bounty("+itoa(dur)+")",u);
					act("<div class='cpr'>You have been enrolled in a new killing spree!<div>",A_ALWAYS, u, null, null, TO_CHAR);
				}
				else
					act("<div class='cpg'>== "+itoa(i)+" ==</div>",A_ALWAYS, u, null, null, TO_CHAR);
			}
		}
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		i := i - 1;
	}
	
:donezo:
	
	unsecure(pc);
	goto start;	
}
dilend // END new_spree

dilbegin end_spree();
external
	string stringdate@bounty(n : integer);
	integer add_bp@bounty(n : integer, u : unitptr);
var
	pc : unitptr;
	i : integer;
	u : unitptr;
	s : string;
	sdate : string;
	idate : integer;
	sl : stringlist;
	rwrd : integer;
	bp : integer;
	sc : integer;
	sx : integer;
	exdp : extraptr;
code
{
	heartbeat := PULSE_SEC;
	
:start:
	
	wait(SFB_CMD, (activator.type == UNIT_ST_PC) and (command("say") and ("end spree" == argument)));

	pc := activator;
	secure(pc,donezo);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
	if("$DAILY_SPREE" in pc.extra)
	{
		s := pc.extra.["$DAILY_SPREE"].descr;
		sl := split(s,"|");
		sdate := stringdate(3);
		if(sdate == sl.[0])
		{
			if("FAIL" == sl.[1])
			{
				exec("say I'm sorry, you failed to meet the conditions in time today "+pc.name,self);
			}
			else if ("SUCCESS" == sl.[1])
			{
				exec("say You've done it "+pc.name+"!",self);
				subextra(pc.extra,"$DAILY_SPREE");
				addextra(pc.extra,{"$DAILY_SPREE"},sdate+"|CLOSED");
				if("$spree_streak" in pc.extra)
				{
					i := atoi(pc.extra.["$spree_streak"].descr) + 1;
					pc.extra.["$spree_streak"].descr := itoa(i);
				}
				else
				{
					i := 1;
					addextra(pc.extra,{"$spree_streak"},itoa(i));
				}
				sx := atoi(pc.extra.["$SPREE_XP"].descr);
				sc := atoi(pc.extra.["$SPREE_COUNT"].descr);
				rwrd := 5000;
				bp := 5;
				if(sl.[3] == "0")
				{
					rwrd := rwrd * 6;
					bp := bp + 3;
				}
				else if(sl.[3] == "1")
				{
					rwrd := rwrd * 6;
					bp := bp + 3;
				}
				else if(sl.[3] == "2")
				{
					rwrd := 5 * sx;
				}
				else if(sl.[3] == "3")
				{
					rwrd := 500 * sc;
				}
				if(sl.[2] == pc.name)
				{
					rwrd := rwrd * 2;
					bp := bp * 2;
				}
				if(i < 10)
				{
					rwrd := rwrd;
					bp := bp;
				}
				else if(i < 20)
				{
					rwrd := rwrd * 2;
					bp := bp * 2;
				}
				else if(i < 50)
				{
					rwrd := rwrd * 3;
					bp := bp * 3;
				}
				else if(i < 100)
				{
					rwrd := rwrd * 4;
					bp := bp * 4;
				}
				else if(i > 100)
				{
					rwrd := rwrd * 5;
					bp := bp * 5;
				}
				wait(SFB_TICK,command(CMD_AUTO_TICK));
				exec("say Your spree was a success.",self);
				exec("grin",self);
				wait(SFB_TICK,command(CMD_AUTO_TICK));
				exec("say Your streak is now at "+itoa(i)+". Here is the commission.",self);
				
				act("$2n hands you some coins.",A_SOMEONE, pc, self, null, TO_CHAR);
				i := transfermoney(null,pc,(rwrd/2));	
				experience(rwrd, pc);
				act("<br><div class='hint'>Killing Spree Completed!</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
				act("<div class='xpgain'>You recieve "+itoa(rwrd)+" experience.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
				i := add_bp(bp,pc);
				if(bp == 1)
					act("<div class='xpgain'>You recieve "+itoa(bp)+" bounty point.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
				else
					act("<div class='xpgain'>You recieve "+itoa(bp)+" bounty points.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
				
				
				exdp := BLACKSMITH_ONGOING in pc.quests;
				if((atoi(pc.extra.["$spree_max"].descr) >= 10) and (not("$spree" in exdp.names)))
				{
					addstring(exdp.names, "spree");
				
					if(("air1" in exdp.names) and ("air2" in exdp.names) and ("air3" in exdp.names) and ("air4" in exdp.names) and
						("water1" in exdp.names) and ("water2" in exdp.names) and ("water3" in exdp.names) and ("water4" in exdp.names) and
						("earth1" in exdp.names) and ("earth2" in exdp.names) and ("earth3" in exdp.names) and ("earth4" in exdp.names) and
						("fire1" in exdp.names) and ("fire2" in exdp.names) and ("fire3" in exdp.names) and ("fire4" in exdp.names) and
						("steel" in exdp.names) and ("spree" in exdp.names))
					{
						exec("say What you have done here is unprecedented, "+pc.name+"!" ,self);
						exec("say You may go and let The Historian know that your tasks for me are complete.", self);
						
						subextra(pc.extra, "$blacksmith");
						exdp := JOIN_ONGOING in pc.quests;
						addstring(exdp.names, "blacksmith");
					}
				}
			}
			else if ("CLOSED" == sl.[1])
			{
				exec("say Blast you "+pc.name+", you've already taken a reward for that spree!",self);
			}
			else
			{
				exec("say Get moving "+pc.name+"! You're not done yet!",self);
			}
		}
		else
			exec("say You'd need to start a killing spree today before you can end one "+pc.name+"!",self);
	}
	else
		exec("say Perhaps you should run a killing spree before you try to end one "+pc.name+"!",self);
	
:donezo:

	unsecure(pc);
	goto start;
}
dilend // END end_spree

dilbegin integer add_bp(n : integer, u : unitptr);
var
	bp : integer;
code
{
	if(not("$bounty_points" in u.extra))
		addextra (u.extra,{"$bounty_points"},"0");	
	bp := atoi(u.extra.["$bounty_points"].descr);
	bp := bp + n;
	if(bp < 0)
		bp := 0;
	u.extra.["$bounty_points"].descr := itoa(bp);
	return(bp);
}
dilend

// n should equal either 2 or 3. Returning date to Month = 2, day = 3
// ex s := stringdate(2); s == 2021.2
// ex s := stringdate(3); s == 2021.2.21
dilbegin string stringdate(n : integer);
var
	sdate   : string;
	sltime	: stringlist;
	slmonth : stringlist;
	i : integer;
code
{
	slmonth := {"Skip","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
	sltime := split(asctime(realtime), " "); 

	// This is to fix an apparent bug where an extra space in the asctime output can result in
	// an empty string being populated into the stringlist, fucking up the parsing.
	while ("" in sltime)
		substring(sltime,"");
	
	i := 0;
	while(i <= 12)
	{
		if(slmonth.[i] == sltime.[1])
			break;
		i := i + 1;
	}
	if(n == 3)
		sdate := sltime.[4] + "." + itoa(i) + "." + sltime.[2];
	if(n == 2)
		sdate := sltime.[4] + "." + itoa(i);
	
	return(sdate);
}
dilend

// feed a string returned from strdate() to return an integer you can compare.
dilbegin integer dateformat (s : string);
var
	i : integer;
	buf : string;
	slbuf : stringlist;
code
{
	buf := "";
	slbuf := split(s,".");
	i := 0;
	while (i < length(slbuf))
	{
		if (atoi(slbuf.[i]) < 10)
			slbuf.[i] := "0" + slbuf.[i];
		buf := buf + slbuf.[i];
		i := i + 1;
	}
	i := atoi(buf);
	return (i);
}
dilend // END dateformat

dilbegin make_bounty();
external
	integer add_bp@bounty(n : integer, u : unitptr);
	integer dateformat@bounty (s : string);
	string stringdate@bounty (n : integer);
var 
	item 	: unitptr;
	pc 		: unitptr;
	exdp   	: extraptr; 
	i 		: integer;
	targ	: unitptr;
	bty		: unitptr;
	arg 	: string;
	sdate   : string;
	smonth	: string;
	sltime	: stringlist;
	slmonth : stringlist;
	slfmonth : stringlist;
	dspl	: stringlist;
	blocked : stringlist;
	slextra : stringlist;
	estreak : extraptr;
	which   : string;
	idate	: integer;
	ibdate	: integer;
	sltemp  : stringlist;
	buf 	: string;
	b_npc : stringlist;
code
{
:init:

	slmonth := {"Skip","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
	slfmonth := {"Skip","January","February","March","April","May","June","July","August","September","October","November","December"};
	blocked := {"basis","death","spells","skills","commands","baseget","basemove","wiz","baselook",
				"update","help","boards","comm","socials","set","mail","function","restrict","newbie",
				"justice","arena","competition","clan","holiday20","guild_quest","guild_paths",
				"assassin","clericguild","fightersguild","mageguild","necro_guild","offices","paladin_guild",
				"sorcerer","thievesguild","druid","knight","ranger","rebirth","barbarian","bounty"};
	b_npc := {"swarm_small@valley2","swarm_med@valley2","swarm_large@valley2"};

:start:

	heartbeat := PULSE_SEC;
	wait(SFB_CMD, (activator.type == UNIT_ST_PC) and (command("say")) and 
		(("contract" == argument) or ("daily contract" == argument) or ("monthly contract" == argument) or ("bonus contract" == argument)));
	
	arg := argument;
	pc := activator;
	secure(pc, start);
	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	buf := "";
	
	if(pc.level < 50)
	{
		exec("Say You need to be at least level 50 to take contracts "+pc.name+"!", self);	
		goto start;
	}

	slextra := {""};
	sltime := split(asctime(realtime), " "); 

	// This is to fix an apparent bug where an extra space in the asctime output can result in
	// an empty string being populated into the stringlist, fucking up the parsing.
	while ("" in sltime)
		substring(sltime,"");

	i := 0;
	while(i <= 12)
	{
		if(slmonth.[i] == sltime.[1])
			break;
		i := i + 1;
	}
	sdate := stringdate(3);
	smonth := stringdate(2);
	
	if(arg == "daily contract")
	{
		arg := "daily";
		goto this_bounty;
	}
	if(arg == "monthly contract")
	{
		arg := "monthly";
		goto this_bounty;
	}
	if(arg == "bonus contract")
	{
		arg := "bonus";
		goto this_bounty;
	}
	
	exec("Say So "+pc.name+" you'd like to see a contract.", self);	
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	
:which_bounty:
	
	exec("Say Would you like the daily, monthly, or a bonus contract?", self);	
	exec("Say You may also shake your head to decline.", self);
	wait(SFB_CMD, (activator.type == UNIT_ST_PC) and ((command("say")) and (("daily" in argument) or ("monthly" in argument) or ("bonus" in argument)))  or (command("shake")));
	
	if (command ("shake"))
		goto decline;
	
	arg := getword(argument);

:this_bounty:
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	if (arg == "daily")
	{
		exdp := pc.extra.["$daily_target"];
		slextra.[0] := "$daily_target";
		which := arg;
	}
	else if (arg == "monthly")
	{
		sdate := smonth;
		exdp := pc.extra.["$monthly_target"];
		slextra.[0] := "$monthly_target";
		which := arg;
	}
	else if (arg == "bonus")
	{
		sdate := "bonus";
		exdp := pc.extra.["$bonus_target"];
		slextra.[0] := "$bonus_target";
		which := arg;
	}
	else
		goto which_bounty;
	
:give_bounty:

	if(exdp != null)
	{
		dspl := split(exdp.descr, "|");
		ibdate := dateformat(dspl.[0]);
		idate := dateformat(sdate);
		if (dspl.[0] == sdate)
		{
			if((sdate == "bonus") and ("DONE" in dspl))
			{
				while ("$bonus_target" in pc.extra)
					subextra(pc.extra, "$bonus_target");
				goto new_target;
			}
			else if(sdate == "bonus")
				goto skip_bonus;
			goto have_bounty;
		}
		
		if((not("DONE" in dspl)) or (idate > ibdate+2))	
		{
			estreak := pc.extra.["$"+which+"_streak"];
			if (estreak != null)
			{
				if (atoi(estreak.descr) > 1)
					exec("say Ha! It seems your streak has come to an end. You had closed "+estreak.descr+" "+which+" bounties in a row!",self);
				else
					exec("say Well, you weren't able to close that last "+which+" contract.",self);
				subextra(pc.extra, "$"+which+"_streak");
			}
		}
		subextra(pc.extra, "$"+which+"_target");
	}
:new_target:
	targ := findrndunit(pc,FIND_UNIT_WORLD,UNIT_ST_NPC);
	if ((targ.zoneidx in blocked) or (targ.symname in b_npc))
		goto new_target;
	if (((targ.race > RACE_CNIDARIA_MIN) and (targ.race <= RACE_CNIDARIA_MAX)) or
       ((targ.race > RACE_PLANT_MIN) and (targ.race <= RACE_PLANT_MAX)))
		goto new_target;
	addextra (pc.extra,slextra,sdate + "|" + targ.symname + "|" + targ.title);
	if(which == "monthly")
		which := slfmonth.[i];
	
	buf := "<br><div class='cpw'>Contract Date: </div><div class='cr'>" + sdate +
		"<br><div class='cpw'>Contract Term: </div><div class='cr'>" + which +
		"<br><div class='cpw'>Target Name: </div><div class='cr'>" + targ.name + 
		"<br><div class='cpw'>Target Alias: </div><div class='cr'>" + targ.title + 
		"<br><div class='cpw'>Target Description: </div><div class='cr'> " + targ.outside_descr;
	if(not(findsymbolic(pc, "tablet@bounty", FIND_UNIT_INVEN)))
	{
		exec("Say Here you go "+pc.name+", a "+which+" contract.", self);	
		bty := load("contract@bounty");
		bty.extra.[0].descr := bty.extra.[0].descr + buf;
		addextra (bty.extra,{"$symname"},targ.symname);
		addextra (bty.extra,{"$player"},pc.name);
		addextra (bty.extra,{"$date"},sdate);
		link(bty,pc);
		act ("$2n quietly slips you a contract.", A_SOMEONE, pc, self, null, TO_CHAR);
		act ("$2n quietly slips $1n something.", A_SOMEONE, pc, self, null, TO_REST);
	}
	else
		exec("say I've updated your tablet with the new "+which+" contract, "+pc.name,self);
	
	act (buf, A_ALWAYS, pc, null, null, TO_ALL);	
	goto the_end;
	
:have_bounty:
	// maybe we should allow multiples?
	// check to see if the first is done. 
	// how do we allow cancellation if you cant complete?
	exec("say Bugger off! You've already taken a "+which+" contract.",self);
	goto the_end;
	
:skip_bonus:
	
	exec("say You've already taken a "+which+" contract.",self);
	exec("say Are you suggesting that you'd like to abandon this one, and get another?",self);
	wait(SFB_CMD, (activator.type == UNIT_ST_PC) and (command("nod") or command("shake")));
	
	pc := activator;
	
	if (command ("shake"))
		goto decline;
	
	if(command ("nod"))
	{
		heartbeat := PULSE_SEC/4;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		exec("cackle",self);
		experience(-25000,pc);
		subextra(pc.extra, "$bonus_target");
		subextra(pc.extra, "$bonus_streak");
		act("<div class='xpgain'>You have lost 25000 experience points!</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
		
		i := add_bp(0,pc);
		if(i >= 5)
			act("<div class='xpgain'>You have lost 5 bounty points!</div>",A_ALWAYS, pc, null, null, TO_CHAR);
		else
			act("<div class='xpgain'>You have lost "+itoa(i)+" bounty points!</div>",A_ALWAYS, pc, null, null, TO_CHAR);
		i := add_bp(-5,pc);
		goto the_end;
	}
	
:decline:
	heartbeat := PULSE_SEC/4;
	wait(SFB_TICK,command(CMD_AUTO_TICK));
	exec("Say Very well then.", self);
:the_end:
	unsecure(pc);
	goto start;

}
dilend

dilbegin claim_bounty();
external
	string stringdate@bounty(n : integer);
	integer add_bp@bounty(n : integer, u : unitptr);
var 
	pc 		: unitptr;
	med 	: unitptr;
	edaily 	: extraptr;
	emonth  : extraptr;
	ebonus  : extraptr;
	estreak : extraptr;
	etotal 	: extraptr;
	emax    : extraptr;
	smtarg	: string;
	sdtarg	: string;
	sbtarg  : string;
	sdone	: string;
	sdate   : string;
	etarg 	: extraptr;
	sldt	: stringlist;
	slmt	: stringlist;
	slbt	: stringlist;
	slstr   : stringlist;
	sltot   : stringlist;
	slnew	: stringlist;
	i   	: integer;
	targ    : unitptr;
	rwrd    : integer;
	arg 	: string;
	bp		: integer;
code
{

:start:

	on_activation((self.position == POSITION_FIGHTING), skip);
	wait(SFB_DONE, command("give") and (target == self));
	
	pc := activator;
	med := medium;
	secure(pc, labsecure);
	
	slnew := {""};
	substring (slnew,"");
	if ((self.inside.symname == "mulligan@bounty") and (self.inside.symname == med.symname))
	{
		exec("snicker",self);
		exec("say So you need to be freed from your contract "+pc.name+"?",self);
		exec("say It seems your... documentation is in order. Just say 'daily' or 'monthly' and it will be ended.",self);
		wait(SFB_CMD, (activator.type == UNIT_ST_PC) and ((command("say")) and (("daily" == argument) or ("monthly" == argument))));
	
		arg := argument;
		wait(SFB_TICK,command(CMD_AUTO_TICK));
		if (arg == "daily")
		{			
			if("DONE" in pc.extra.["$daily_target"].descr)
			{
				exec("say Your daily contract is already closed "+pc.name+"!",self);
				exec("give mulligan "+pc.name, self);
				goto start;
			}
			subextra(pc.extra, "$daily_target");
		}
		else if (arg == "monthly")
		{
			if("DONE" in pc.extra.["$monthly_target"].descr)
			{
				exec("say Your monthly contract is already closed "+pc.name+"!",self);
				exec("give mulligan "+pc.name, self);
				goto start;
			}
			subextra(pc.extra, "$monthly_target");
		}
		
		destroy(self.inside);
		exec("say Consider the contract forgotten "+pc.name+".",self);
		goto start;
	}
	
	if((self.inside.symname != "head@death") and (self.inside.symname == med.symname))
	{
		exec("say What would I do with this, "+pc.name+"?",self);
		exec("give "+self.inside.name+" "+pc.name,self);
		goto start;
	}
	if(dilfind("spree_m@bounty",pc))
	{
		exec("say Try again after your spree, "+pc.name+"!",self);
		exec("give "+self.inside.name+" "+pc.name,self);
		goto start;
	}
	
	edaily := pc.extra.["$daily_target"];
	emonth := pc.extra.["$monthly_target"];
	ebonus := pc.extra.["$bonus_target"];
	sldt := split(edaily.descr,"|");
	slmt := split(emonth.descr,"|");
	slbt := split(ebonus.descr,"|");
	sdtarg := sldt.[1];
	smtarg := slmt.[1];
	sbtarg := slbt.[1];

	// if you have turned in a valid bounty
	
	if(sdtarg == self.inside.extra.["$living_sym"].descr)
	{
		etarg := edaily;
		emax := pc.extra.["$daily_max"];
		estreak := pc.extra.["$daily_streak"];
		etotal := pc.extra.["$daily_total"];
		sdone := "daily"; 
		sdate := stringdate(3); 
		
		if (estreak == null)
		{
			addextra (pc.extra,{"$daily_streak"},"0");
			estreak := pc.extra.["$daily_streak"];
		}
		if (etotal == null)
		{
			addextra (pc.extra,{"$daily_total"},"0");
			etotal := pc.extra.["$daily_total"];
		}
		if (emax == null)
		{
			addextra (pc.extra,{"$daily_max"},"0");
			emax := pc.extra.["$daily_max"];
		}
	}
	else if (smtarg == self.inside.extra.["$living_sym"].descr)
	{
		etarg := emonth;
		emax := pc.extra.["$monthly_max"];
		estreak := pc.extra.["$monthly_streak"];
		etotal := pc.extra.["$monthly_total"];
		sdone := "monthly";
		sdate := stringdate(2);

		if (estreak == null)
		{
			addextra (pc.extra,{"$monthly_streak"},"0");
			estreak := pc.extra.["$monthly_streak"];
		}
		if (etotal == null)
		{
			addextra (pc.extra,{"$monthly_total"},"0");
			etotal := pc.extra.["$monthly_total"];
		}
		if (emax == null)
		{
			addextra (pc.extra,{"$monthly_max"},"0");
			emax := pc.extra.["$monthly_max"];
		}
	}
	else if (sbtarg == self.inside.extra.["$living_sym"].descr)
	{
		etarg := ebonus;
		emax := pc.extra.["$bonus_max"];
		estreak := pc.extra.["$bonus_streak"];
		etotal := pc.extra.["$bonus_total"];
		sdone := "bonus";
		sdate := stringdate(3);

		if (estreak == null)
		{
			addextra (pc.extra,{"$bonus_streak"},"0");
			estreak := pc.extra.["$bonus_streak"];
		}
		if (etotal == null)
		{
			addextra (pc.extra,{"$bonus_total"},"0");
			etotal := pc.extra.["$bonus_total"];
		}
		if (emax == null)
		{
			addextra (pc.extra,{"$bonus_max"},"0");
			emax := pc.extra.["$bonus_max"];
		}
	}
	else
	{
		exec("cackle",self);
		exec("say Kill happy arent we "+pc.name+"? This wasn't your target.",self);
		exec("say We'll take care of this for you.",self);
		destroy(self.inside);
		goto labsecure;
	}
	
	
	slstr := split(etarg.descr, "|");
	if("DONE" in slstr)
		goto already_done;
	if(not("bonus" in slstr))
		if (slstr.[0] != sdate)
			goto already_done;
		
	destroy(self.inside);	
	
	// increment pointers as necessary
	
	estreak.descr := itoa(atoi(estreak.descr) + 1);
	etotal.descr := itoa(atoi(etotal.descr) + 1);
	etarg.descr := etarg.descr + "|DONE";
	if(atoi(estreak.descr) > atoi(emax.descr))
		emax.descr := estreak.descr;
	
	
	
	/*

This code is for creating the signs and tracking leaders. 
It is all based on extras on the PC's, so we can capture
data for now until we're ready to implement.

I think we should probably ditch this system entirely, and
leverage the competition boards. Will investigate.

	targ := findsymbolic("day_sign@bounty");
	if (targ.extra.[0].descr == "")
	{
		sendtext("freshies - add "+pc.name,pc);
		addstring(slnew, pc.name);
		addstring(slnew, estreak.descr);
		goto freshies;
	}
	slstr := split(replace("<br>"," - ",targ.extra.[0].descr)," - ");
	substring (slstr,"");
	i := 0;
	while(i < length(slstr))
	{
		sendtext("i == "+itoa(i)+" lenght == "+ itoa(length(slstr)),pc);
		if(atoi(estreak.descr) > atoi(slstr.[i+1]))
		{
			sendtext("greater - add "+pc.name,pc);
			addstring(slnew, pc.name);
			addstring(slnew, estreak.descr);
			if (pc.name != slstr.[i])
			{
				sendtext("great and not equal - add "+slstr.[i],pc);
				addstring(slnew, slstr.[i]);
				addstring(slnew, slstr.[i+1]);
			}
		}		
		else if(atoi(estreak.descr) <= atoi(slstr.[i+1]))
		{
			sendtext("less or equal - add "+slstr.[i],pc);
			addstring(slnew, slstr.[i]);
			addstring(slnew, slstr.[i+1]);
			
			// just added this - testing
			// trying to handle scenarios where the board isnt full and if
			// have less than someone else
			//addstring(slnew, pc.name);
			//addstring(slnew, estreak.descr);
		}
		if (i == 18)
			break;
		i := i + 2;
	}
:freshies:
	i := 0;
	targ.extra.[0].descr := "";
	sendtext("i == "+itoa(i)+" length == "+ itoa(length(slnew)),pc);
	while (i <= length(slnew)-2)
	{
		sendtext("i == "+itoa(i)+" length == "+ itoa(length(slnew)),pc);
		sendtext("writing slnew: "+slnew.[i],pc);
		targ.extra.[0].descr := targ.extra.[0].descr + slnew.[i];
		targ.extra.[0].descr := targ.extra.[0].descr + " - ";
		targ.extra.[0].descr := targ.extra.[0].descr + slnew.[i+1];
		targ.extra.[0].descr := targ.extra.[0].descr + "<br>";
		i := i + 2;
	}
	
	*/
	
	
	destroy(self.inside);
	exec("say Yes, "+slstr.[2]+"'s head.",self);
	exec("say It appears we can consider your "+sdone+" contract closed, "+pc.name+".",self);
	exec("grin",self);
	
	// The reward section //
	
	exec("say Your streak is now at "+estreak.descr+". Here is the commission.",self);
	
	// set streak length
	i := atoi(estreak.descr);
	if(sdone == "daily")
	{
		// base value in XP.
		// cash reward will be iron = xp value / 2
		rwrd := 1000;
		bp := 2;
		if (i < 7)
			rwrd := (rwrd * i) + 5000;
		else if (i < 10)
			rwrd := 15000;
		else if (i < 100)
		{
			bp := bp * 2;
			rwrd := rwrd * (i * 3);
		}
		else if (i < 200)
		{
			bp := bp * 3;
			rwrd := rwrd * (i * 4);
		}
		else if (i < 300)
		{
			bp := bp * 4;
			rwrd := rwrd * (i * 5);
		}
		else if (i >= 300)
		{
			bp := bp * 5;
			rwrd := rwrd * (i * 6);
		}
		
		
		// streak milestone rewards
		if(i == 14 or i == 30 or i == 60 or i == 90 or i == 180 or i == 365)
		{
			exec("say I've included a little something for making "+itoa(i)+" daily contracts in a row.",self);
			bp := bp * 2;
			rwrd := rwrd * 2;
		}
		
	}
	else if (sdone == "monthly")
	{
		// base value in XP.
		// cash reward will be iron = xp value / 2
		rwrd := 10000;
		bp := 10;
		if (i < 3)
		{
			rwrd := rwrd * (i * 2);
		}
		else if (i < 10)
		{	
			bp := bp * 2;
			rwrd := rwrd * (i * 3);
		}
		else if (i < 15)
		{
			bp := bp * 3;
			rwrd := rwrd * (i * 4);
		}
		else if (i >= 20)
		{
			bp := bp * 4;
			rwrd := rwrd * (i * 5);
		}
		
		// streak milestone rewards
		if(i == 6 or i == 12 or i == 18 or i == 24)
		{
			exec("say I've included a little something for making "+itoa(i)+" monthly contracts in a row.",self);
			bp := bp * 2;
			rwrd := rwrd * 2;
		}
	}
	else if (sdone == "bonus")
	{
		// base value in XP.
		// cash reward will be iron = xp value / 2
		rwrd := 5000;	
		bp := 1;
		// streak milestone rewards
		if((i == 10) or (i == 20) or (i == 30) or (i == 40) or (i == 50))
		{
			exec("say I've included a little something for making "+itoa(i)+" bonus contracts in a row.",self);
			bp := 2;
			rwrd := rwrd * 2;
		}
	}
	
	act("<br>$2n hands you some coins.",A_SOMEONE, pc, self, null, TO_CHAR);
	i := transfermoney(null,pc,(rwrd/2));	
	experience(rwrd, pc);
	act("<br><div class='hint'>Contract Completed!</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
	act("<div class='xpgain'>You recieve "+itoa(rwrd)+" experience.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
	i := add_bp(bp,pc);
	if(bp == 1)
		act("<div class='xpgain'>You recieve "+itoa(bp)+" bounty point.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
	else
		act("<div class='xpgain'>You recieve "+itoa(bp)+" bounty points.</div>",A_ALWAYS, pc, null, null, TO_CHAR); 
	goto labsecure;
	// End reward section // 
	
:already_done:

	if (atoi(estreak.descr) > 1)
		exec("say This contract has already closed! It seems your streak of "+estreak.descr+" "+sdone+" contracts has come to an end.",self);
	else
		exec("say Your first contract in the streak, and it had already closed!",self);
	subextra(pc.extra, "$"+sdone+"_streak");
	
:labsecure:

	unsecure(pc);	
	goto start;
}
dilend		

dilbegin restore_pot(aff : string, strength : string);
var
	pc : unitptr;
code
{
	wait(SFB_DONE, command("quaff") and (medium == self));
	pc := activator;
	secure(pc,donezo);

	log("Secured "+pc.name);
	
	if(aff == "restore")
	{
		if(strength == "full")
		{
			pc.hp := pc.max_hp;
			pc.endurance := pc.max_endurance;
			pc.mana := pc.max_mana;
		}
		else if(strength == "strong")
		{
			if(pc.hp < ((pc.max_hp / 4)*3))
				pc.hp := pc.hp + ((pc.max_hp / 4)*3);
			if(pc.endurance < ((pc.max_endurance / 4)*3))
				pc.endurance := pc.endurance + ((pc.max_endurance / 4)*3);
			if(pc.mana < ((pc.max_mana / 4)*3))
				pc.mana := pc.mana + ((pc.max_mana / 4)*3);
		}
		else if(strength == "half")
		{
			if(pc.hp < (pc.max_hp / 2))
				pc.hp := pc.hp + (pc.max_hp / 2);
			if(pc.endurance < (pc.max_endurance / 2))
				pc.endurance := pc.endurance + (pc.max_endurance / 2);
			if(pc.mana < (pc.max_mana / 2))
				pc.mana := pc.mana + (pc.max_mana / 2);
		}
	}
	else if (aff == "hp")
	{
		if(strength == "full")
			pc.hp := pc.max_hp;
		else if(strength == "strong")
		{
			if(pc.hp < ((pc.max_hp / 4)*3))
				pc.hp := pc.hp + ((pc.max_hp / 4)*3);
		}
		else if(strength == "half")
		{
			if(pc.hp < (pc.max_hp / 2))
				pc.hp := pc.hp + (pc.max_hp / 2);
		}
	}
	else if (aff == "endurance")
	{
		if(strength == "full")
			pc.endurance := pc.max_endurance;
		else if(strength == "strong")
		{
			if(pc.endurance < ((pc.max_endurance / 4)*3))
				pc.endurance := pc.endurance + ((pc.max_endurance / 4)*3);
		}
		else if(strength == "half")
		{
			if(pc.endurance < (pc.max_endurance / 2))
				pc.endurance := pc.endurance + (pc.max_endurance / 2);
		}
	}
	else if (aff == "mana")
	{
		log(pc.name+" current mana: "+itoa(pc.mana)+"/"+itoa(pc.max_mana));
		if(strength == "full")
			pc.mana := pc.max_mana;
		else if(strength == "strong")
		{
			if(pc.mana < ((pc.max_mana / 4)*3))
				pc.mana := pc.mana + ((pc.max_mana / 4)*3);
		}
		else if(strength == "half")
		{
			if(pc.mana < (pc.max_mana / 2))
				pc.mana := pc.mana + (pc.max_mana / 2);
		}
		log(pc.name+" updated mana: "+itoa(pc.mana)+"/"+itoa(pc.max_mana));
	}
	if(pc.hp > pc.max_hp)
		pc.hp := pc.max_hp;
	if(pc.endurance > pc.max_endurance)
		pc.endurance := pc.max_endurance;
	if(pc.mana > pc.max_mana)
		pc.mana := pc.max_mana;
	
:donezo:
	unsecure(pc);
	quit;
}
dilend

dilbegin hint (which : string, htype : string);
var
	pc : unitptr;
	zn : string;
	exdp : extraptr;
	zp : zoneptr;
	slt : stringlist;
	uhin : unitptr;
	sdate : string;
	targ : unitptr;
code
{
:start:
	wait(SFB_CMD, (command("look")) and ("hint" in argument));
	pc := activator;
	zp := zhead();
	heartbeat := PULSE_SEC;
	if(which == "d")
		exdp :=  pc.extra.["$daily_target"];
	else if(which == "m")
		exdp :=  pc.extra.["$monthly_target"];
	slt := split(exdp.descr,"|");
	if(slt.[3] == "DONE")
	{
		act("You can only use your hint on an open contract!",A_SOMEONE, pc, self, null, TO_CHAR);
		block;
		goto start;
	}
	sdate := slt.[0];
	targ := findsymbolic(slt.[1]);
	zn := targ.zoneidx;
	self.extra.[0].descr := self.extra.[0].descr + 
	"<br><div class='cpw'>Contract Date: </div><div class='cpc'>" + sdate +
	"<br><div class='cpw'>Target Name: </div><div class='cpc'>" + targ.name + 
	"<br><div class='cpw'>Target Alias: </div><div class='cpc'>" + targ.title + 
	"<br><div class='cpw'>Target Description: </div><div class='cpc'> " + targ.outside_descr;
	while (zp)
	{
		if(zp.name == zn)
		{
			slt := split(zp.title,"@");
			if(htype == "z" )
			{
				self.extra.[0].descr := self.extra.[0].descr + 
				"<br><div class='cpw'>Zone Name: </div><div class='cpc'>" + slt.[0];
			}
			else if(htype == "c")
			{
				self.extra.[0].descr := self.extra.[0].descr + 
				"<br><div class='cpw'>Continent Name: </div><div class='cpc'>" + slt.[1];
			}
			quit;
		}
		zp := zp.next;
	}
	quit;
}
dilend

dilbegin shop(items : stringlist);
external
	integer add_bp@bounty(n : integer, u : unitptr);
	integer dateformat@bounty(s : string);
	string stringdate@bounty(n : integer);
var
	pc : unitptr;
	i : integer;
	ln : integer;
	buf : string;
	j : integer;
	bp : string;
	uitem : unitptr;
	ibp : integer;
	arg : string;
	day : string;
	sldate : stringlist;
	r : integer;
	sdate : string;
	ssdate : string;
	idate : integer;
	isdate : integer;
code
{
:init:

	heartbeat := PULSE_SEC;
	
	ln:=length(items);

	:start:

	buf:="<b><div class='cpn'>Bounty Hunters Guild Shop</div></b><br>";
	buf:=buf+"<table><tr><th>Item # - </th><th>Item Name</th><th> - Bounty Points</th></tr>";
	i := 0;
	j := 1;
	
	wait(SFB_CMD, (command("list") or command("buy")));
	block;

	sldate := split(asctime(realtime)," ");
	day := sldate.[0];
	sldate := {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
	sdate := stringdate(3);
	
	r := rnd(0,6);
	if(sldate.[r] == day)
		r := 1;
	else
		r := 0;
	if(self.outside.symname != "shop@bounty")
	{
		exec("say I'm afraid I must return to my shop first.",self);
		goto start;
	}
	if(not("$sale_date" in self.outside.extra))
	{	
		addextra(self.outside.extra,{"$sale_date"},sdate);
		addextra(self.outside.extra,{"$sale_type"},itoa(r));
	}
	else 
	{
		ssdate := self.outside.extra.["$sale_date"].descr;
		idate := dateformat@bounty(sdate);
		isdate := dateformat@bounty(ssdate);
		if(idate > isdate)
		{
			subextra(self.outside.extra,"$sale_date");
			subextra(self.outside.extra,"$sale_type");
			addextra(self.outside.extra,{"$sale_date"},sdate);
			addextra(self.outside.extra,{"$sale_type"},itoa(r));
		}
	}
	
	// the r value becomes a denominator for costs if a sale is on.
	if (self.outside.extra.["$sale_type"].descr == "1")
		r := 2;
	else
		r := 1;
	
	if(argument)
		arg := argument;
	
	pc := activator;
	ibp := add_bp(0,pc);
	bp := itoa(ibp);
	
	if(command("list"))
		goto list;
	if(command("buy"))
		goto buy;

:list:


	while(i < (ln-2))
	{
		buf:=buf+"<tr><td>"+itoa(j)+" - </td><td>"+items.[i+1]+"</td><td> - "+itoa(atoi(items.[i+2]) / r)+"</td></tr>";
		i := i+3;
		j := j+1;
	}
	
	bp := "</table><br><div class='cpc'>You have "+bp+" Bounty Points available.</div><br><br>";
	sendtext(buf+bp,pc);
	
	if(r == 2)
		exec("say We're having a sale today. It's a great time to buy!",self);
	goto start;
	
:buy:
	
	while(i < (ln-2))
	{
		if(atoi(arg) == j)
		{
			if((atoi(items.[i+2]) / r) <= ibp)
			{
				ibp := add_bp(((atoi(items.[i+2]) / r) * (-1)),pc);
				uitem := load(items.[i]+"@bounty");
				link(uitem, pc);
				exec("say Here is your "+uitem.name+" "+pc.name+"!",self);
			}
			else
				exec("say You don't have "+itoa(atoi(items.[i+2]) / r)+" bounty points "+pc.name+"!",self);
			goto start;
		}
		i := i+3;
		j := j+1;
	}
	exec("say Please select an item number from the list.",self);
	goto start;
	
}
dilend


%rooms

entry_room
title "<div class='cpn'>Entrance to Bounty Hunters Guild</div>"
descr
"Stepping out from bustle of Kings Road, the entrance to the Bounty Hunters 
Guild is a distinct change of environment. The large stone building extends 
high into the air and has a commanding presence. Tall trees provide ample 
shade during the bright days, and plenty of routes to approach... quietly. 
It seems that there has been significant wealth brought to the guild over 
many generations. A large set of double-doors extend into the darkness."

movement SECT_CITY
flags {UNIT_FL_NO_MOB}
ALWAYS_LIGHT

north to bounty_1;
south to kingroad5@ratswarf;

end

bounty_1
title "<div class='cpn'>Inside the Guild</div>"
descr
"Through the large double-doors the quiet of this space encompasses you. While 
the building is largely unadorned and simple rough-hewn stone. The sheer size 
and scale of the place speak to the significant investments that have been 
made over many years. To the east and west more rooms expand into the vast hall, 
and to the south the outdoors and access to Kings Road can be seen in the distance."
flags {UNIT_FL_INDOORS}
movement SECT_CITY
ALWAYS_LIGHT

south to entry_room;
west to contracts;
east to bounty_h;
north to shrine;

end

bounty_h
title "<div class='cpn'>A Hallway in the Guild</div>"
descr
"Here off the grand entry, the air is still and quiet. Despite this respite 
from the bustle of the world outside, there is a clear sense of life here. 
There is a purpose to every stone, and every doorway. The floors are well 
worn, and the hallway has clearly seen significant traffic over the years. 
There are doorways to the north, south, and east. To the west, the grand 
entry and the large double-doors leading out can be seen."
flags {UNIT_FL_INDOORS}
movement SECT_CITY
ALWAYS_LIGHT

west to bounty_1;
east to shop;
north to smithy;
south to jewels;

end

shop
title "<div class='cpn'>The Guild Shop</div>"
descr
"The many wares which are made available to guild members can be seen adorning 
nearly every wall and visible surface. From potions and tinctures, to notes and 
papers, and even jewely and weapons, there is an impressive array available. 
There is a large counter which has been cleared to make way for transaction"
flags {UNIT_FL_INDOORS}
movement SECT_CITY
ALWAYS_LIGHT

west to bounty_h;

end

smithy
names {"sprees"}
title "<div class='cpn'>The Smithy</div>"
descr
"Through the doorway a large working Smithy is unveiled. The design of the room 
allows for air to flow freely in to feed the great bellows that keep the furnace 
and smelter hot. Large piles of ore are lain out, and amongst them chests of finer 
metals and precious stones. The Smithy is alive with work as the hands that support 
The Blacksmith work their art. This appears to be a formidable smithy capable of 
supplying far greater volumes of arms and armor than it seems like the Hunters 
would need."
flags {UNIT_FL_INDOORS}
movement SECT_CITY
ALWAYS_LIGHT

south to bounty_h;

dilcopy anvils@bounty();

end

jewels
names {"packages"}
title "<div class='cpn'>The Jeweler's Workshop</div>"
descr
"South of the hallway the Jeweler's Workshop is a quiet juxtaposition to the 
ringing of hammers on anvils that periodically rings out from the Smithy to 
the north. Chests of fine metals and precious gemstones are arrayed strategically 
throughout the space. A small-batch smelter appropriate to the task burns in the 
corner, and a range of benches covered in files and other tools of the trade 
fill the space. It is clear that the Bounty Hunters produce high quality pieces."
flags {UNIT_FL_INDOORS}
movement SECT_CITY
ALWAYS_LIGHT

north to bounty_h;

end

contracts
names {"contracts"}
title "<div class='cpn'>The Contracts Room</div>"
descr
"Here away from the main hall of the guild, a quiet room filled with maps 
is in front of you. On every wall and table a map of a different part of 
the world sits. A large desk can be seen in the middle of the room, 
providing ample space for managing the myriad contracts the guild processes. 
Behind the desk darkness overcomes what light the torches shed."
flags {UNIT_FL_INDOORS, UNIT_FL_SACRED}
movement SECT_CITY
ALWAYS_LIGHT

east to bounty_1;

end

shrine
title "<div class='cpn'>The Bounty Hunters Shrine</div>"
descr
"In the back of the great hall, a peaceful shrine pays homage to the gods 
of the hunt. Candles burn at the base of shrine, sending their flickering 
light into the darkness. Incense burns alongside the candles, and the 
scent brings visions of both frenzied chase, and gratifying calm."
flags {UNIT_FL_INDOORS, UNIT_FL_SACRED}
movement SECT_CITY
ALWAYS_LIGHT

south to bounty_1;

dilcopy pray@bounty();

end

sanctum
title "<div class='cpn'>The Inner Sanctum</div>"
descr
"This is the Inner Sanctum of the Bounty Hunters Guild. Rumors about 
its existance have spread throughout the land, but to most, its assumed 
that rumor is all it ever was. The reality of being here, however, puts 
those rumors to rest. Like the rest of the guild, it is a large, and 
masterfully wrought stone room. No lack of attention was given to the 
construction, and a well-made yet simple shrine rests against the southern 
wall. The space is not entirely free from decor, as frescos have been 
painted in sections on the walls representing the hunt in a seemingly strange and unknown part of history."
flags {UNIT_FL_INDOORS, UNIT_FL_SACRED, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

dilcopy pray2@bounty();

north to sanctum_1;
east to sanc_he;
west to sanc_hw
keyword {"fresco"}
key nokey
open {EX_OPEN_CLOSE, EX_CLOSED, EX_HIDDEN};
extra {"frescos","fresco","wall"}
"The frescos show the history of the hunt. Intricate details was painted into the 
still-wet plasted as the Inner Sanctum was erected, and dried to form a permanent 
history. Certain details appear strangely worn on the eastern wall."

end

sanctum_1
title "<div class='cpn'>The Inner Sanctum</div>"
descr
"Here the Bounty Hunters Guild Inner Sanctum expands, and comes to an apparent 
end. The frescos continue across the walls here, and an overall sense of well being 
and peace is here. Despite this, it is with no small sense of apprehension your eyes 
come to rest on simple though plentiful feast laid out across sturdy tables. Food 
an drink enough to feed many is arrayed across the tables, and while of fine quality 
it is simple, and not out of character for what you have noticed of this strange 
place. The room appears empty, and the only exit is back to the south."

extra {"tables", "table"}
"The tables are crafted from thick strong timbers, and could support a small army. 
That, or a very large feast."

extra {"feast"}
"It is somewhat strange to find a feast of fresh hot food laid out here in this 
seemingly lonely place. Dare you partake in this feast?"

extra {"frescos","fresco","wall"}
"The frescos show the history of the hunt. Intricate details was painted into the 
still-wet plasted as the Inner Sanctum was erected, and dried to form a permanent 
history."

flags {UNIT_FL_INDOORS, UNIT_FL_SACRED, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

dilcopy feast@bounty();

south to sanctum;

end

sanc_he
title "<div class='cpn'>A Hallway off the Inner Sanctum</div>"
descr
"A hallway leads away from the main rooms of the Inner Sanctum. The air is 
still and quiet. Despite this respite from the bustle of the world outside, 
there is a clear sense of life here. As with the hall above, there is a 
clear purpose to every stone. The space seems significantly less well 
worn than the outer guild above, and the hallway has seen little traffic 
over the years. There is a doorway east that opens into a vast library. To the 
west, the Inner Sanctum can be seen."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

west to sanctum;
east to library;

end

library
title "<div class='cpn'>The Guild Library</div>"
descr
"The Great Library of the Bounty Hunters is somewhat of a wonder. Rumors speak 
of it as though it may not exist, and its presence hidden away within the Inner 
Sanctum of the Guild gives substance to those rumors. To many in the world, 
this place does not exist. Having entered the room, the wonder of it is striking. 
The room is cavernous, with great bookshelfs stretching high and lining every 
wall. Volumes covering histories, to tales of heros long past, and to songs of the 
great bards who have roamed the land are included in every shape and size. In the 
center of the room a great tome is placed on a pedastal, where a shaft of light 
from an unknown source falls on its open pages. The only exit is back to the west."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

west to sanc_he;

end

sanc_hw
title "<div class='cpn'>A Hallway off the Inner Sanctum</div>"
descr
"A hallway leads away from the main rooms of the Inner Sanctum. The air is 
still and quiet. Despite this respite from the bustle of the world outside, 
there is a clear sense of life here. As with the hall above, there is a 
clear purpose to every stone. The space seems significantly less well 
worn than the outer guild above, and the hallway has seen little traffic 
over the years. There is a doorway west that opens into a stairwell. To the 
east, the Inner Sanctum can be seen."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

east to sanctum;
west to stairwell;
end

stairwell
title "<div class='cpn'>Atop the Stairwell</div>"
descr
"Here a great stone stair leads in what is clearly now a distinct style, 
down into unknown depths. Strong yet simple construction placed with very 
distinct purpose is what you see. It is curious then, that the builders 
decided to mined deep into the surrounding bedrock to create the space 
that lies below, it seems an uncharacteristic effort, without a clear purpose. 
Travel is possible east into the hallway, and down the stairs."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

east to sanc_hw;
down to stairs;
end

stairs
title "<div class='cpn'>In the Stairwell</div>"
descr
"Large stone blocks make each step in the spiral stairwell, each large enough 
for two men to stand abrest. The quality is as distinct as the rest of the Guild 
though to what end these stairs were built it is still unclear. Travel is possible 
both up and down."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

up to stairwell;
down to bottom;

end

bottom
title "<div class='cpn'>Bottom of the Stairwell</div>"
descr
"Reaching the bottom of the stairwell, a passage opens to either direction. To  both the 
east and west the stones placed to form the structures above give way to the raw bedrock 
that makes up the surrounds. It is a somewhat peculiar thing, given the clear intent to 
every stone placed, to decide in this space to leave it seemingly unfinished. To the west, 
a somewhat larger cave opens up than the passageway that moves along to the east. One may 
also choose to climb the stairs here heading back up to the Inner Sanctum."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

up to stairs;
west to cave;
east to faces;

end

faces
title "<div class='cpn'>Hallway of Faces</div>"
descr
"Stepping into the long hallway, the raw stone appears pocked with strange images. 
It is with sudden horror that you realize these are not, in fact, images on the 
stone but faces. Human, animal, demon, and angel. Young, and old, male and female. 
Faces of every discernable nature line every space along what seems to be an 
impossibly long hallway. To the west the horrors come to an end at the bottom of 
the stairway, and the hallway continues to the east."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

west to bottom;
east to faces2;

end

faces2
title "<div class='cpn'>Hallway of Faces</div>"
descr
"With the sense of horror undeminished you note that the faces spread down this 
ghastly hallway. Human, animal, demon, and angel. Young, and old, male and female. 
Faces of every discernable nature line every space along what seems to be an 
impossibly long hallway. To the west the horrors continue in the hallway of faces, 
and to the east it seems the hallway may come to an end, though it is with no small 
sense of apprehension that you wonder what lies in that direction."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

west to faces;
east to crypt descr
	"The Necromancer's Crypt."
	keyword {"door"} difficulty 80
	key nokey
	open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED};

dilcopy no_magic@bounty();
	
end

crypt
title "<div class='cpn'>The Necromancer's Crypt</div>"
descr
"The Hallway of Faces opens here into a cavern, that is now identifiable as The 
Necromancer's crypt. Ghastly sights sit arrayed on surfaces that would shake the 
most stalwart individual. Heads in various states of... deconstruction... can be 
seen on working tables, and spaces for magics of a type that are best left unspoken 
have clearly been practiced in other areas. The only visible exit is back through 
the horrors of the Hallway of Faces to the west."
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

west to faces2 descr
	"Hallway of Faces."
	keyword {"door"} difficulty 80
	key nokey
	open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED};
	
dilcopy no_magic@bounty();

end

cave
title "<div class='cpn'>Entering the Cave</div>"
descr
"Entering the Cave"
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

east to bottom;
west to circle descr
	"The Summoning Circle."
	keyword {"door"} difficulty 25
	key nokey
	open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED};
	
dilcopy no_pick@bounty();

end

circle
title "<div class='cpn'>The Summoning Circle</div>"
descr
"The Summoning Circle"
flags {UNIT_FL_INDOORS, UNIT_FL_NO_TELEPORT}
movement SECT_CITY
ALWAYS_LIGHT

east to cave descr
	"Entering the Cave."
	keyword {"door"} difficulty 25
	key nokey
	open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED};
	
dilcopy no_pick@bounty();

end

%mobiles

hunter
names {"bounty hunter","hunter","man"}    
title "the bounty hunter"        
descr "A tall man with a dark smirk stands in the shadows."
extra{}
"Tall and well muscled, he is of unknown origin. An dark smirk seems to permanently rest on his face. This 
appears to be the man who may offer a contract if you but ask." 

alignment -1000
M_AVG_HUMAN(100,SEX_MALE)
position POSITION_STANDING 

dilcopy make_bounty@bounty();
dilcopy claim_bounty@bounty();
dilcopy join@bounty();
dilcopy status@bounty();
dilcopy report@bounty();

end 

shopkeep
names {"shopkeeper","dwarf"}    
title "the guild shopkeeper"        
descr "A girthy dwarf with a warm smile stands behind the counter."
extra{}
"Girthy, and apparently not unfamiliar with his wine, the shopkeeper nevertheless 
seems to be rather friendly. Simply ask for his list to select from the guild wares." 

alignment 0
M_AVG_DWARF(100,SEX_MALE)
position POSITION_STANDING 

dilcopy shop@bounty({"tablet","Bounty Hunters Tablet","150",
						"full_restore","Potion of Full Restoration","60",
						"strong_restore","Potent Potion of Restoration","30",
						"half_restore","Potion of Restoration","15",
						"full_mana","Potion of Full Mana","20",
						"strong_mana","Potent Potion of Mana","10",
						"half_mana","Potion of Mana","5",
						"full_end","Potion of Full Endurance","20",
						"strong_end","Potent Potion of Endurance","10",
						"half_end","Potion of Endurance","5",
						"full_heal","Potion of Full Healing","20",
						"strong_heal","Potent Potion of Healing","10",
						"half_heal","Potion of Healing","5",
						"mulligan","Contract Breaking Note","80",
						"dz_hint","Daily Hint - Zone","40",
						"dc_hint","Daily Hint - Continent","20",
						"mz_hint","Monthly Hint - Zone","40",
						"mc_hint","Monthly Hint - Continent","20"});

end 

guide
names {"the guide","guide","woman"}    
title "The Guide"        
descr "A dark-cloaked woman is here, in the shadows."
extra{}
"Not much can be seen of the woman under the dark cloak. A strength can be felt 
as you gaze upon her. It would be wise to choose your words carefully." 

alignment -1000
M_AVG_ELF(100,SEX_FEMALE)
position POSITION_STANDING 

dilcopy expel@bounty();
dilcopy qguide@bounty();

end 

historian
names {"the historian","historian","centaur"}    
title "The Historian"        
descr "An aged centaur stands here with a look of knowing."
extra{}
"Tall and powerful despite clearly showing the signs of significant age, 
The Historian is a somewhat mysterious creature. Not much is known 
about him, except that he has served the Hunters Guild longer than any
other living beings." 

alignment 0
M_UNICORN_XLARGE(100,SEX_MALE)
position POSITION_STANDING 

dilcopy qhistorian@bounty();
dilcopy qhistorian2@bounty();

end 

blacksmith
names {"the blacksmith","blacksmith","groll"}    
title "The Blacksmith"        
descr "A strong groll blacksmith stands at the forge."
extra{}
"The Blacksmith is a central figure in the Bounty Hunters guild. 
With every swing of his hammer, he brings glory and strength to the 
members. He works to craft the unique weapons, and armors which 
serve the Hunters. Ask about the opportunity to leverage his weapons 
on a spree." 

alignment 0
M_GROLL_WARRIOR_AXE(100,SEX_MALE)
position POSITION_STANDING 

dilcopy new_spree@bounty();
dilcopy end_spree@bounty();
dilcopy qblacksmith@bounty();
dilcopy qblacksmith2@bounty();
dilcopy report@bounty();

end 

jeweler
names {"the jeweler","jeweler","half-elf"}    
title "The Jeweler"        
descr "A half-elven jeweler is here working her craft."
extra{}
"The Bounty Hunters have relied on the finely-wrought jewelery 
produced by The Jeweler to both reward their members, and support 
the payments which work to lubricate hands and minds in favor 
of their work." 

alignment 0
M_AVG_HALF_ELF(100,SEX_FEMALE)
position POSITION_STANDING 
exp 400

dilcopy delivery@bounty();
dilcopy qjeweler@bounty();
dilcopy qjeweler2@bounty();
dilcopy report@bounty();

end 

summoner
names {"the summoner","summoner","darkelf"}    
title "The Summoner"        
descr "A darkelf summoner broods under deeply cowled robes."
extra{}
"Not much can be made out of The Summoner from within the depths 
of her deeply cowled robes. She has immense power, and participates 
in unknown rituals and summonings on behalf of The Guild." 

alignment 0
M_DARK_ELF_MAGE_MIND(100, SEX_FEMALE, "cone of shards")
position POSITION_STANDING 
exp 400

dilcopy qsummoner@bounty();
dilcopy qsummoner2@bounty();
dilcopy qsummoner3@bounty();

end 

necromancer
names {"the necromancer","necromancer","kingraith"}    
title "The Necromancer"        
descr "The Necromancer is here, reading from a scroll."
extra{}
"Very little is known of The Necromancer. A surprisingly charismatic seeming 
individual who looks at you from behind the scroll he is reading. As you glance 
at him, you note that there is a startling hollowness to his eyes." 

alignment 0
M_KINGRAITH_CLERIC_SWORD(100, SEX_MALE, "deathly grasp","")
position POSITION_STANDING 
exp 400

dilcopy qnecro@bounty();
dilcopy qnecro2@bounty();

end 

%objects

contract
names {"contract"}
title "a contract"
descr "A crisp paper is here."
extra {}
"<div class='cr'>REWARD!!</div><br>"
manipulate {MANIPULATE_TAKE}
weight 1
cost 1 IRON_PIECE
end

tablet
names {"bounty hunters tablet","btyhntrtblt","tablet"}
title "the bounty hunters tablet"
descr "A strange stone tablet lies here."
extra {}
""
manipulate {MANIPULATE_TAKE}
weight 1
cost 1 IRON_PIECE

dilcopy tablet@bounty();

end

// longest streaks
assn_plaque
names {"top assassin plaque","top assassin","plaque","1"}
title "the top assassins plaque"
descr "A <a cmd='read #'>top assassin plaque</a> is here."
weight 1
cost 1 IRON_PIECE
extra {}
""
end
//  longest active monthly streak
mnth_sign
names {"monthly assassin sign","monthly assassin","sign","2"}
title "the monthly assassins sign"
descr "An active <a cmd='read #'>monthly assassin sign</a> is here."
weight 1
cost 1 IRON_PIECE
extra {}
""
end
// longest active daily streak
day_sign
names {"daily assassin sign","daily assassin","sign","3"}
title "the daily assassins sign"
descr "An active <a cmd='read #'>daily assassin sign</a> is here."
weight 1
cost 1 IRON_PIECE
extra {}
""
end

//most total dailies
tday_board
names {"total daily assassin board","total assassin","board","4"}
title "the total daily assassins board"
descr "A <a cmd='read #'>total assassin board</a> is here."
weight 1
cost 1 IRON_PIECE
extra {}
""
end
// most total monthlies
tmonth_board
names {"total monthly assassin board","total monthly","board"}
title "the total monthly assassins board"
descr "A <a cmd='read #'>total monthly board</a> is here."
weight 1
cost 1 IRON_PIECE
extra {}
""
end

bty_sign
names {"bounty sign","sign","instructions"}
title "some instructions"
descr "Some helpful <a cmd='read #'>instructions</a> are here."
extra {}
"Say 'contract' to hear the contract options available.<br><br>
Say 'contract status' to hear the status of any existing contracts, 
and for the option to receive a new contract card.<br><br>
Say 'report' to get a report of your closed contracts to date."
weight 1
cost 1 IRON_PIECE

end

spree_sign
names {"spree sign","sign","instructions"}
title "some instructions"
descr "Some helpful <a cmd='read #'>instructions</a> are here."
extra {}
"Say 'spree' to kick off a new killing spree. You would be well <br>
advised to ensure you have a group with you ready for killing! <br><br>
Say 'end spree' once the time has run out and you are ready to <br>
collect your rewards!<br><br>
You must have completed 20 total bounties of any kind from the <br>
Bounty Hunter in order to lead a spree. Anyone may participate in <br>
following a leader on their spree.<br><br>
Say 'report' to get a report of your killing sprees to date."

weight 1
cost 1 IRON_PIECE

end

pkg_sign
names {"package sign","sign","instructions"}
title "some instructions"
descr "Some helpful <a cmd='read #'>instructions</a> are here."
extra {}
"Say 'i need work' to kick off a new package delivery for the jeweler!<br>
Be careful, you dont want to open these packages!<br><br>
Say 'report' to get a report of your package deliveries to date."

weight 1
cost 1 IRON_PIECE

end

tome
names {"large tome","tome"}
title "the tome of legends"
descr "A large <a cmd='read #'>tome</a> sits on a marvelously crafted pedestal."
extra {}
"Herein are the names of the heroes who have defended The Guild from our enemy.<br><br>"

weight 1
cost 1 IRON_PIECE

dilcopy tome@bounty();

end



//////////////////////////////////////////////////////////////////
//              special quest related items.                    //
//////////////////////////////////////////////////////////////////

air1
names {"activated air", "air powder", "powder", "air"}
title "<div class='cpw'>activated element of air</div>"
descr "A large heap of a strange <div class='cpw'>white powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

air2
names {"activated air", "air powder", "powder", "air"}
title "<div class='cpw'>activated element of air</div>"
descr "A large heap of a strange <div class='cpw'>white powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

air3
names {"activated air", "air powder", "powder", "air"}
title "<div class='cpw'>activated element of air</div>"
descr "A large heap of a strange <div class='cpw'>white powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

air4
names {"activated air", "air powder", "powder", "air"}
title "<div class='cpw'>activated element of air</div>"
descr "A large heap of a strange <div class='cpw'>white powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end


fire1
names {"activated fire", "fire powder", "powder", "fire"}
title "<div class='cpr'>activated element of fire</div>"
descr "A large heap of a strange <div class='cpr'>blood red powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

fire2
names {"activated fire", "fire powder", "powder", "fire"}
title "<div class='cpr'>activated element of fire</div>"
descr "A large heap of a strange <div class='cpr'>blood red powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

fire3
names {"activated fire", "fire powder", "powder", "fire"}
title "<div class='cpr'>activated element of fire</div>"
descr "A large heap of a strange <div class='cpr'>blood red powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

fire4
names {"activated fire", "fire powder", "powder", "fire"}
title "<div class='cpr'>activated element of fire</div>"
descr "A large heap of a strange <div class='cpr'>blood red powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

earth1
names {"activated earth", "earth powder", "powder", "earth"}
title "<div class='cpn'>activated element of earth</div>"
descr "A large heap of a strange <div class='cpn'>dark powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

earth2
names {"activated earth", "earth powder", "powder", "earth"}
title "<div class='cpn'>activated element of earth</div>"
descr "A large heap of a strange <div class='cpn'>dark powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

earth3
names {"activated earth", "earth powder", "powder", "earth"}
title "<div class='cpn'>activated element of earth</div>"
descr "A large heap of a strange <div class='cpn'>dark powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

earth4
names {"activated earth", "earth powder", "powder", "earth"}
title "<div class='cpn'>activated element of earth</div>"
descr "A large heap of a strange <div class='cpn'>dark powder</div> powder is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

water1
names {"activated water", "water powder", "powder", "water"}
title "<div class='cb'>activated element of water</div>"
descr "A large heap of a strange <div class='cb'>light blue powder</div> is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

water2
names {"activated water", "water powder", "powder", "water"}
title "<div class='cb'>activated element of water</div>"
descr "A large heap of a strange <div class='cb'>light blue powder</div> is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

water3
names {"activated water", "water powder", "powder", "water"}
title "<div class='cb'>activated element of water</div>"
descr "A large heap of a strange <div class='cb'>light blue powder</div> is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

water4
names {"activated water", "water powder", "powder", "water"}
title "<div class='cb'>activated element of water</div>"
descr "A large heap of a strange <div class='cb'>light blue powder</div> is here."
extra {}
"This is an activated elemental powder, containing eons of power."
weight 125
manipulate {MANIPULATE_TAKE}
end

activator
names {"activator"}
title "<div class='cpy'>an elemental activator</div>"
descr "a strange <div class='cpy'>elemental activator</div> is here."
extra {}
"This is <div class='cpy'>an elemental activator</div>."
weight 5
manipulate {MANIPULATE_TAKE}
end


//////////////////////////////////////////////////////////////////
//          special rewards and items for bounties.             //
//////////////////////////////////////////////////////////////////

full_restore
names {"potion of full restoration","full restoration","potion"}
title "a potion of full restoration"
descr "A potion of full restoration is here."
extra {}
"A clear glass vial contains a glowing multi-colored substance. It 
appears to be a highly potent potion of restoration."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("restore","full");

end

strong_restore
names {"potent potion of restoration","potent restoration","potion"}
title "a potent potion of restoration"
descr "A potent potion of restoration is here."
extra {}
"A clear glass vial contains a glowing multi-colored substance. It 
appears to be a potent potion of restoration."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("restore","strong");

end

half_restore
names {"potion of restoration","restoration","potion"}
title "a potion of restoration"
descr "A potion of restoration is here."
extra {}
"A clear glass vial contains a glowing multi-colored substance. It 
appears to be a potion of restoration."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("restore","half");

end

full_heal
names {"potion of full healing","full healing","potion"}
title "a potion of full healing"
descr "A potion of full healing is here."
extra {}
"A clear glass vial contains a glowing red substance. It appears 
to be a highly potent potion of healing."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("hp","full");

end

strong_heal
names {"potent potion of healing","potent healing","potion"}
title "a potent potion of healing"
descr "A potent potion of healing is here."
extra {}
"A clear glass vial contains a glowing red substance. It appears 
to be a potent potion of healing."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("hp","strong");

end

half_heal
names {"potion of healing","healing","potion"}
title "a potion of healing"
descr "A potion of healing is here."
extra {}
"A clear glass vial contains a glowing red substance. It appears 
to be a potion of healing."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("hp","half");

end

full_end
names {"potion of full endurance","full endurance","potion"}
title "a potion of full endurance"
descr "A potion of full endurance is here."
extra {}
"A clear glass vial contains a glowing green substance. It appears 
to be a highly potent potion of endurance."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("endurance","full");

end

strong_end
names {"potent potion of endurance","potent endurance","potion"}
title "a potent potion of endurance"
descr "A potent potion of endurance is here."
extra {}
"A clear glass vial contains a glowing green substance. It appears 
to be a potent potion of endurance."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("endurance","strong");

end

half_end
names {"potion of endurance","endurance","potion"}
title "a potion of endurance"
descr "A potion of endurance is here."
extra {}
"A clear glass vial contains a glowing green substance. It appears 
to be a potion of endurance."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("endurance","half");

end

full_mana
names {"potion of full mana","full mana","potion"}
title "a potion of full mana"
descr "A potion of full mana is here."
extra {}
"A clear glass vial contains a glowing blue substance. It appears 
to be a highly potent potion of mana."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("mana","full");

end

strong_mana
names {"potent potion of mana","potent mana","potion"}
title "a potent potion of mana"
descr "A potent potion of mana is here."
extra {}
"A clear glass vial contains a glowing blue substance. It appears 
to be a potent potion of mana."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("mana","strong");

end

half_mana
names {"potion of mana","mana","potion"}
title "a potion of mana"
descr "A potion of mana is here."
extra {}
"A clear glass vial contains a glowing blue substance. It appears 
to be a potion of mana."
manipulate {MANIPULATE_TAKE,MANIPULATE_HOLD}
weight 1
cost 1 IRON_PIECE
type ITEM_POTION

dilcopy restore_pot@bounty("mana","half");

end


mulligan
names {"contract breaker","note","mulligan"}
title "a contract breaking note"
descr "A contract breaking note is here."
extra {}
"This note, when given to the bounty hunter, allows you to break from a single contract."
manipulate {MANIPULATE_TAKE}
weight 1
cost 1 IRON_PIECE
end

mc_hint
names {"monthly continent hint","hint"}
title "a monthly continent hint"
descr "A monthly continent hint is here."
extra {}
"<div class='cpc'>HINT!!</div><br>"
manipulate {MANIPULATE_TAKE}
dilcopy hint@bounty("m","c");
weight 1
cost 1 IRON_PIECE
end

mz_hint
names {"monthly zone hint","hint"}
title "a monthly zone hint"
descr "A monthly zone hint is here."
extra {}
"<div class='cpc'>HINT!!</div><br>"
manipulate {MANIPULATE_TAKE}
dilcopy hint@bounty("m","z");
weight 1
cost 1 IRON_PIECE
end

dc_hint
names {"daily continent hint","hint"}
title "a daily continent hint"
descr "A daily continent hint is here."
extra {}
"<div class='cpc'>HINT!!</div><br>"
manipulate {MANIPULATE_TAKE}
dilcopy hint@bounty("d","c");
weight 1
cost 1 IRON_PIECE
end

dz_hint
names {"daily zone hint","hint"}
title "a daily zone hint"
descr "A daily zone hint is here."
extra {}
"<div class='cpc'>HINT!!</div><br>"
manipulate {MANIPULATE_TAKE}
dilcopy hint@bounty("d","z");
weight 1
cost 1 IRON_PIECE
end

package
names {"package", "packagefor"}
title "a lost package"
descr "A lost package lies here."
extra {}
"The package is nondescript, wrapped in brown paper and tied with string.  
You dare not open it."
weight 2
manipulate {MANIPULATE_TAKE}
dilcopy package@bounty();
end

bp_obj
names {"bounty object", "object"}
title "a bounty point object"
descr "A magical administrators object is here, looking bountiful."
extra {}
"This object is used to grant bounty points to characters for situations that 
dictate a relevant reward. To use this, simply use the format: <br><br>

reward [playername] [number of points] [reason]<br><br>
EX: reward issa 50 Did a very cool thing!<br><br>

result: Issa will be granted 50 additional bounty points, and recieve the message as an act."
weight 2
manipulate {MANIPULATE_TAKE}
dilcopy reward@bounty();
end

%reset

load hunter into contracts max 1
load shopkeep into shop max 1
load bty_sign into contracts max 1
load pkg_sign into jewels max 1
load spree_sign into smithy max 1
load jeweler into jewels max 1
load blacksmith into smithy max 1
load historian into library max 1
load tome into library max 1
load summoner into circle max 1
load necromancer into crypt max 1

door cave WEST {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED}
door circle EAST {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED}

door faces2 EAST {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED}
door crypt WEST {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED}

%end
